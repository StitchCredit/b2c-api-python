# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class ApplicationContextClassLoaderParentUnnamedModule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'layer': 'object',
        'name': 'str',
        'descriptor': 'ApplicationContextClassLoaderParentUnnamedModuleDescriptor',
        'class_loader': 'ApplicationContextClassLoaderParentUnnamedModuleClassLoader',
        'annotations': 'list[object]',
        'declared_annotations': 'list[object]',
        'named': 'bool',
        'packages': 'list[str]'
    }

    attribute_map = {
        'layer': 'layer',
        'name': 'name',
        'descriptor': 'descriptor',
        'class_loader': 'classLoader',
        'annotations': 'annotations',
        'declared_annotations': 'declaredAnnotations',
        'named': 'named',
        'packages': 'packages'
    }

    def __init__(self, layer=None, name=None, descriptor=None, class_loader=None, annotations=None, declared_annotations=None, named=None, packages=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationContextClassLoaderParentUnnamedModule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._layer = None
        self._name = None
        self._descriptor = None
        self._class_loader = None
        self._annotations = None
        self._declared_annotations = None
        self._named = None
        self._packages = None
        self.discriminator = None

        if layer is not None:
            self.layer = layer
        if name is not None:
            self.name = name
        if descriptor is not None:
            self.descriptor = descriptor
        if class_loader is not None:
            self.class_loader = class_loader
        if annotations is not None:
            self.annotations = annotations
        if declared_annotations is not None:
            self.declared_annotations = declared_annotations
        if named is not None:
            self.named = named
        if packages is not None:
            self.packages = packages

    @property
    def layer(self):
        """Gets the layer of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The layer of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: object
        """
        return self._layer

    @layer.setter
    def layer(self, layer):
        """Sets the layer of this ApplicationContextClassLoaderParentUnnamedModule.


        :param layer: The layer of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: object
        """

        self._layer = layer

    @property
    def name(self):
        """Gets the name of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The name of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationContextClassLoaderParentUnnamedModule.


        :param name: The name of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def descriptor(self):
        """Gets the descriptor of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The descriptor of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: ApplicationContextClassLoaderParentUnnamedModuleDescriptor
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this ApplicationContextClassLoaderParentUnnamedModule.


        :param descriptor: The descriptor of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: ApplicationContextClassLoaderParentUnnamedModuleDescriptor
        """

        self._descriptor = descriptor

    @property
    def class_loader(self):
        """Gets the class_loader of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The class_loader of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: ApplicationContextClassLoaderParentUnnamedModuleClassLoader
        """
        return self._class_loader

    @class_loader.setter
    def class_loader(self, class_loader):
        """Sets the class_loader of this ApplicationContextClassLoaderParentUnnamedModule.


        :param class_loader: The class_loader of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: ApplicationContextClassLoaderParentUnnamedModuleClassLoader
        """

        self._class_loader = class_loader

    @property
    def annotations(self):
        """Gets the annotations of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The annotations of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: list[object]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ApplicationContextClassLoaderParentUnnamedModule.


        :param annotations: The annotations of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: list[object]
        """

        self._annotations = annotations

    @property
    def declared_annotations(self):
        """Gets the declared_annotations of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The declared_annotations of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: list[object]
        """
        return self._declared_annotations

    @declared_annotations.setter
    def declared_annotations(self, declared_annotations):
        """Sets the declared_annotations of this ApplicationContextClassLoaderParentUnnamedModule.


        :param declared_annotations: The declared_annotations of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: list[object]
        """

        self._declared_annotations = declared_annotations

    @property
    def named(self):
        """Gets the named of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The named of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: bool
        """
        return self._named

    @named.setter
    def named(self, named):
        """Sets the named of this ApplicationContextClassLoaderParentUnnamedModule.


        :param named: The named of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: bool
        """

        self._named = named

    @property
    def packages(self):
        """Gets the packages of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501


        :return: The packages of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :rtype: list[str]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ApplicationContextClassLoaderParentUnnamedModule.


        :param packages: The packages of this ApplicationContextClassLoaderParentUnnamedModule.  # noqa: E501
        :type: list[str]
        """

        self._packages = packages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationContextClassLoaderParentUnnamedModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationContextClassLoaderParentUnnamedModule):
            return True

        return self.to_dict() != other.to_dict()
