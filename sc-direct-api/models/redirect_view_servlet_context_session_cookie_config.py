# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class RedirectViewServletContextSessionCookieConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'path': 'str',
        'comment': 'str',
        'domain': 'str',
        'secure': 'bool',
        'max_age': 'int',
        'http_only': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'path': 'path',
        'comment': 'comment',
        'domain': 'domain',
        'secure': 'secure',
        'max_age': 'maxAge',
        'http_only': 'httpOnly'
    }

    def __init__(self, name=None, path=None, comment=None, domain=None, secure=None, max_age=None, http_only=None, local_vars_configuration=None):  # noqa: E501
        """RedirectViewServletContextSessionCookieConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._path = None
        self._comment = None
        self._domain = None
        self._secure = None
        self._max_age = None
        self._http_only = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if comment is not None:
            self.comment = comment
        if domain is not None:
            self.domain = domain
        if secure is not None:
            self.secure = secure
        if max_age is not None:
            self.max_age = max_age
        if http_only is not None:
            self.http_only = http_only

    @property
    def name(self):
        """Gets the name of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The name of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RedirectViewServletContextSessionCookieConfig.


        :param name: The name of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The path of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RedirectViewServletContextSessionCookieConfig.


        :param path: The path of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def comment(self):
        """Gets the comment of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The comment of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RedirectViewServletContextSessionCookieConfig.


        :param comment: The comment of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def domain(self):
        """Gets the domain of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The domain of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RedirectViewServletContextSessionCookieConfig.


        :param domain: The domain of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def secure(self):
        """Gets the secure of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The secure of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this RedirectViewServletContextSessionCookieConfig.


        :param secure: The secure of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    @property
    def max_age(self):
        """Gets the max_age of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The max_age of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this RedirectViewServletContextSessionCookieConfig.


        :param max_age: The max_age of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    @property
    def http_only(self):
        """Gets the http_only of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501


        :return: The http_only of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :rtype: bool
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this RedirectViewServletContextSessionCookieConfig.


        :param http_only: The http_only of this RedirectViewServletContextSessionCookieConfig.  # noqa: E501
        :type: bool
        """

        self._http_only = http_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedirectViewServletContextSessionCookieConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedirectViewServletContextSessionCookieConfig):
            return True

        return self.to_dict() != other.to_dict()
