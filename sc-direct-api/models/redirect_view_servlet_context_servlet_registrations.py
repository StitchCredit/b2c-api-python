# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class RedirectViewServletContextServletRegistrations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mappings': 'list[str]',
        'run_as_role': 'str',
        'name': 'str',
        'class_name': 'str',
        'init_parameters': 'dict(str, str)'
    }

    attribute_map = {
        'mappings': 'mappings',
        'run_as_role': 'runAsRole',
        'name': 'name',
        'class_name': 'className',
        'init_parameters': 'initParameters'
    }

    def __init__(self, mappings=None, run_as_role=None, name=None, class_name=None, init_parameters=None, local_vars_configuration=None):  # noqa: E501
        """RedirectViewServletContextServletRegistrations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mappings = None
        self._run_as_role = None
        self._name = None
        self._class_name = None
        self._init_parameters = None
        self.discriminator = None

        if mappings is not None:
            self.mappings = mappings
        if run_as_role is not None:
            self.run_as_role = run_as_role
        if name is not None:
            self.name = name
        if class_name is not None:
            self.class_name = class_name
        if init_parameters is not None:
            self.init_parameters = init_parameters

    @property
    def mappings(self):
        """Gets the mappings of this RedirectViewServletContextServletRegistrations.  # noqa: E501


        :return: The mappings of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :rtype: list[str]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this RedirectViewServletContextServletRegistrations.


        :param mappings: The mappings of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :type: list[str]
        """

        self._mappings = mappings

    @property
    def run_as_role(self):
        """Gets the run_as_role of this RedirectViewServletContextServletRegistrations.  # noqa: E501


        :return: The run_as_role of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :rtype: str
        """
        return self._run_as_role

    @run_as_role.setter
    def run_as_role(self, run_as_role):
        """Sets the run_as_role of this RedirectViewServletContextServletRegistrations.


        :param run_as_role: The run_as_role of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :type: str
        """

        self._run_as_role = run_as_role

    @property
    def name(self):
        """Gets the name of this RedirectViewServletContextServletRegistrations.  # noqa: E501


        :return: The name of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RedirectViewServletContextServletRegistrations.


        :param name: The name of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def class_name(self):
        """Gets the class_name of this RedirectViewServletContextServletRegistrations.  # noqa: E501


        :return: The class_name of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this RedirectViewServletContextServletRegistrations.


        :param class_name: The class_name of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def init_parameters(self):
        """Gets the init_parameters of this RedirectViewServletContextServletRegistrations.  # noqa: E501


        :return: The init_parameters of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._init_parameters

    @init_parameters.setter
    def init_parameters(self, init_parameters):
        """Sets the init_parameters of this RedirectViewServletContextServletRegistrations.


        :param init_parameters: The init_parameters of this RedirectViewServletContextServletRegistrations.  # noqa: E501
        :type: dict(str, str)
        """

        self._init_parameters = init_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedirectViewServletContextServletRegistrations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedirectViewServletContextServletRegistrations):
            return True

        return self.to_dict() != other.to_dict()
