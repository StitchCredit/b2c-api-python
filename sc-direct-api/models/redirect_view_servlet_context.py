# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class RedirectViewServletContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'jsp_config_descriptor': 'RedirectViewServletContextJspConfigDescriptor',
        'response_character_encoding': 'str',
        'effective_major_version': 'int',
        'request_character_encoding': 'str',
        'effective_minor_version': 'int',
        'servlet_registrations': 'dict(str, RedirectViewServletContextServletRegistrations)',
        'default_session_tracking_modes': 'list[str]',
        'filter_registrations': 'dict(str, RedirectViewServletContextFilterRegistrations)',
        'effective_session_tracking_modes': 'list[str]',
        'servlet_context_name': 'str',
        'virtual_server_name': 'str',
        'session_cookie_config': 'RedirectViewServletContextSessionCookieConfig',
        'session_tracking_modes': 'list[str]',
        'class_loader': 'ApplicationContextClassLoaderParentUnnamedModuleClassLoader',
        'session_timeout': 'int',
        'servlet_names': 'object',
        'server_info': 'str',
        'major_version': 'int',
        'minor_version': 'int',
        'servlets': 'object',
        'init_parameter_names': 'object',
        'context_path': 'str',
        'attribute_names': 'object'
    }

    attribute_map = {
        'jsp_config_descriptor': 'jspConfigDescriptor',
        'response_character_encoding': 'responseCharacterEncoding',
        'effective_major_version': 'effectiveMajorVersion',
        'request_character_encoding': 'requestCharacterEncoding',
        'effective_minor_version': 'effectiveMinorVersion',
        'servlet_registrations': 'servletRegistrations',
        'default_session_tracking_modes': 'defaultSessionTrackingModes',
        'filter_registrations': 'filterRegistrations',
        'effective_session_tracking_modes': 'effectiveSessionTrackingModes',
        'servlet_context_name': 'servletContextName',
        'virtual_server_name': 'virtualServerName',
        'session_cookie_config': 'sessionCookieConfig',
        'session_tracking_modes': 'sessionTrackingModes',
        'class_loader': 'classLoader',
        'session_timeout': 'sessionTimeout',
        'servlet_names': 'servletNames',
        'server_info': 'serverInfo',
        'major_version': 'majorVersion',
        'minor_version': 'minorVersion',
        'servlets': 'servlets',
        'init_parameter_names': 'initParameterNames',
        'context_path': 'contextPath',
        'attribute_names': 'attributeNames'
    }

    def __init__(self, jsp_config_descriptor=None, response_character_encoding=None, effective_major_version=None, request_character_encoding=None, effective_minor_version=None, servlet_registrations=None, default_session_tracking_modes=None, filter_registrations=None, effective_session_tracking_modes=None, servlet_context_name=None, virtual_server_name=None, session_cookie_config=None, session_tracking_modes=None, class_loader=None, session_timeout=None, servlet_names=None, server_info=None, major_version=None, minor_version=None, servlets=None, init_parameter_names=None, context_path=None, attribute_names=None, local_vars_configuration=None):  # noqa: E501
        """RedirectViewServletContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._jsp_config_descriptor = None
        self._response_character_encoding = None
        self._effective_major_version = None
        self._request_character_encoding = None
        self._effective_minor_version = None
        self._servlet_registrations = None
        self._default_session_tracking_modes = None
        self._filter_registrations = None
        self._effective_session_tracking_modes = None
        self._servlet_context_name = None
        self._virtual_server_name = None
        self._session_cookie_config = None
        self._session_tracking_modes = None
        self._class_loader = None
        self._session_timeout = None
        self._servlet_names = None
        self._server_info = None
        self._major_version = None
        self._minor_version = None
        self._servlets = None
        self._init_parameter_names = None
        self._context_path = None
        self._attribute_names = None
        self.discriminator = None

        if jsp_config_descriptor is not None:
            self.jsp_config_descriptor = jsp_config_descriptor
        if response_character_encoding is not None:
            self.response_character_encoding = response_character_encoding
        if effective_major_version is not None:
            self.effective_major_version = effective_major_version
        if request_character_encoding is not None:
            self.request_character_encoding = request_character_encoding
        if effective_minor_version is not None:
            self.effective_minor_version = effective_minor_version
        if servlet_registrations is not None:
            self.servlet_registrations = servlet_registrations
        if default_session_tracking_modes is not None:
            self.default_session_tracking_modes = default_session_tracking_modes
        if filter_registrations is not None:
            self.filter_registrations = filter_registrations
        if effective_session_tracking_modes is not None:
            self.effective_session_tracking_modes = effective_session_tracking_modes
        if servlet_context_name is not None:
            self.servlet_context_name = servlet_context_name
        if virtual_server_name is not None:
            self.virtual_server_name = virtual_server_name
        if session_cookie_config is not None:
            self.session_cookie_config = session_cookie_config
        if session_tracking_modes is not None:
            self.session_tracking_modes = session_tracking_modes
        if class_loader is not None:
            self.class_loader = class_loader
        if session_timeout is not None:
            self.session_timeout = session_timeout
        if servlet_names is not None:
            self.servlet_names = servlet_names
        if server_info is not None:
            self.server_info = server_info
        if major_version is not None:
            self.major_version = major_version
        if minor_version is not None:
            self.minor_version = minor_version
        if servlets is not None:
            self.servlets = servlets
        if init_parameter_names is not None:
            self.init_parameter_names = init_parameter_names
        if context_path is not None:
            self.context_path = context_path
        if attribute_names is not None:
            self.attribute_names = attribute_names

    @property
    def jsp_config_descriptor(self):
        """Gets the jsp_config_descriptor of this RedirectViewServletContext.  # noqa: E501


        :return: The jsp_config_descriptor of this RedirectViewServletContext.  # noqa: E501
        :rtype: RedirectViewServletContextJspConfigDescriptor
        """
        return self._jsp_config_descriptor

    @jsp_config_descriptor.setter
    def jsp_config_descriptor(self, jsp_config_descriptor):
        """Sets the jsp_config_descriptor of this RedirectViewServletContext.


        :param jsp_config_descriptor: The jsp_config_descriptor of this RedirectViewServletContext.  # noqa: E501
        :type: RedirectViewServletContextJspConfigDescriptor
        """

        self._jsp_config_descriptor = jsp_config_descriptor

    @property
    def response_character_encoding(self):
        """Gets the response_character_encoding of this RedirectViewServletContext.  # noqa: E501


        :return: The response_character_encoding of this RedirectViewServletContext.  # noqa: E501
        :rtype: str
        """
        return self._response_character_encoding

    @response_character_encoding.setter
    def response_character_encoding(self, response_character_encoding):
        """Sets the response_character_encoding of this RedirectViewServletContext.


        :param response_character_encoding: The response_character_encoding of this RedirectViewServletContext.  # noqa: E501
        :type: str
        """

        self._response_character_encoding = response_character_encoding

    @property
    def effective_major_version(self):
        """Gets the effective_major_version of this RedirectViewServletContext.  # noqa: E501


        :return: The effective_major_version of this RedirectViewServletContext.  # noqa: E501
        :rtype: int
        """
        return self._effective_major_version

    @effective_major_version.setter
    def effective_major_version(self, effective_major_version):
        """Sets the effective_major_version of this RedirectViewServletContext.


        :param effective_major_version: The effective_major_version of this RedirectViewServletContext.  # noqa: E501
        :type: int
        """

        self._effective_major_version = effective_major_version

    @property
    def request_character_encoding(self):
        """Gets the request_character_encoding of this RedirectViewServletContext.  # noqa: E501


        :return: The request_character_encoding of this RedirectViewServletContext.  # noqa: E501
        :rtype: str
        """
        return self._request_character_encoding

    @request_character_encoding.setter
    def request_character_encoding(self, request_character_encoding):
        """Sets the request_character_encoding of this RedirectViewServletContext.


        :param request_character_encoding: The request_character_encoding of this RedirectViewServletContext.  # noqa: E501
        :type: str
        """

        self._request_character_encoding = request_character_encoding

    @property
    def effective_minor_version(self):
        """Gets the effective_minor_version of this RedirectViewServletContext.  # noqa: E501


        :return: The effective_minor_version of this RedirectViewServletContext.  # noqa: E501
        :rtype: int
        """
        return self._effective_minor_version

    @effective_minor_version.setter
    def effective_minor_version(self, effective_minor_version):
        """Sets the effective_minor_version of this RedirectViewServletContext.


        :param effective_minor_version: The effective_minor_version of this RedirectViewServletContext.  # noqa: E501
        :type: int
        """

        self._effective_minor_version = effective_minor_version

    @property
    def servlet_registrations(self):
        """Gets the servlet_registrations of this RedirectViewServletContext.  # noqa: E501


        :return: The servlet_registrations of this RedirectViewServletContext.  # noqa: E501
        :rtype: dict(str, RedirectViewServletContextServletRegistrations)
        """
        return self._servlet_registrations

    @servlet_registrations.setter
    def servlet_registrations(self, servlet_registrations):
        """Sets the servlet_registrations of this RedirectViewServletContext.


        :param servlet_registrations: The servlet_registrations of this RedirectViewServletContext.  # noqa: E501
        :type: dict(str, RedirectViewServletContextServletRegistrations)
        """

        self._servlet_registrations = servlet_registrations

    @property
    def default_session_tracking_modes(self):
        """Gets the default_session_tracking_modes of this RedirectViewServletContext.  # noqa: E501


        :return: The default_session_tracking_modes of this RedirectViewServletContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_session_tracking_modes

    @default_session_tracking_modes.setter
    def default_session_tracking_modes(self, default_session_tracking_modes):
        """Sets the default_session_tracking_modes of this RedirectViewServletContext.


        :param default_session_tracking_modes: The default_session_tracking_modes of this RedirectViewServletContext.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["COOKIE", "URL", "SSL"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(default_session_tracking_modes).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `default_session_tracking_modes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(default_session_tracking_modes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._default_session_tracking_modes = default_session_tracking_modes

    @property
    def filter_registrations(self):
        """Gets the filter_registrations of this RedirectViewServletContext.  # noqa: E501


        :return: The filter_registrations of this RedirectViewServletContext.  # noqa: E501
        :rtype: dict(str, RedirectViewServletContextFilterRegistrations)
        """
        return self._filter_registrations

    @filter_registrations.setter
    def filter_registrations(self, filter_registrations):
        """Sets the filter_registrations of this RedirectViewServletContext.


        :param filter_registrations: The filter_registrations of this RedirectViewServletContext.  # noqa: E501
        :type: dict(str, RedirectViewServletContextFilterRegistrations)
        """

        self._filter_registrations = filter_registrations

    @property
    def effective_session_tracking_modes(self):
        """Gets the effective_session_tracking_modes of this RedirectViewServletContext.  # noqa: E501


        :return: The effective_session_tracking_modes of this RedirectViewServletContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._effective_session_tracking_modes

    @effective_session_tracking_modes.setter
    def effective_session_tracking_modes(self, effective_session_tracking_modes):
        """Sets the effective_session_tracking_modes of this RedirectViewServletContext.


        :param effective_session_tracking_modes: The effective_session_tracking_modes of this RedirectViewServletContext.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["COOKIE", "URL", "SSL"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(effective_session_tracking_modes).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `effective_session_tracking_modes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(effective_session_tracking_modes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._effective_session_tracking_modes = effective_session_tracking_modes

    @property
    def servlet_context_name(self):
        """Gets the servlet_context_name of this RedirectViewServletContext.  # noqa: E501


        :return: The servlet_context_name of this RedirectViewServletContext.  # noqa: E501
        :rtype: str
        """
        return self._servlet_context_name

    @servlet_context_name.setter
    def servlet_context_name(self, servlet_context_name):
        """Sets the servlet_context_name of this RedirectViewServletContext.


        :param servlet_context_name: The servlet_context_name of this RedirectViewServletContext.  # noqa: E501
        :type: str
        """

        self._servlet_context_name = servlet_context_name

    @property
    def virtual_server_name(self):
        """Gets the virtual_server_name of this RedirectViewServletContext.  # noqa: E501


        :return: The virtual_server_name of this RedirectViewServletContext.  # noqa: E501
        :rtype: str
        """
        return self._virtual_server_name

    @virtual_server_name.setter
    def virtual_server_name(self, virtual_server_name):
        """Sets the virtual_server_name of this RedirectViewServletContext.


        :param virtual_server_name: The virtual_server_name of this RedirectViewServletContext.  # noqa: E501
        :type: str
        """

        self._virtual_server_name = virtual_server_name

    @property
    def session_cookie_config(self):
        """Gets the session_cookie_config of this RedirectViewServletContext.  # noqa: E501


        :return: The session_cookie_config of this RedirectViewServletContext.  # noqa: E501
        :rtype: RedirectViewServletContextSessionCookieConfig
        """
        return self._session_cookie_config

    @session_cookie_config.setter
    def session_cookie_config(self, session_cookie_config):
        """Sets the session_cookie_config of this RedirectViewServletContext.


        :param session_cookie_config: The session_cookie_config of this RedirectViewServletContext.  # noqa: E501
        :type: RedirectViewServletContextSessionCookieConfig
        """

        self._session_cookie_config = session_cookie_config

    @property
    def session_tracking_modes(self):
        """Gets the session_tracking_modes of this RedirectViewServletContext.  # noqa: E501


        :return: The session_tracking_modes of this RedirectViewServletContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._session_tracking_modes

    @session_tracking_modes.setter
    def session_tracking_modes(self, session_tracking_modes):
        """Sets the session_tracking_modes of this RedirectViewServletContext.


        :param session_tracking_modes: The session_tracking_modes of this RedirectViewServletContext.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["COOKIE", "URL", "SSL"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(session_tracking_modes).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `session_tracking_modes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(session_tracking_modes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._session_tracking_modes = session_tracking_modes

    @property
    def class_loader(self):
        """Gets the class_loader of this RedirectViewServletContext.  # noqa: E501


        :return: The class_loader of this RedirectViewServletContext.  # noqa: E501
        :rtype: ApplicationContextClassLoaderParentUnnamedModuleClassLoader
        """
        return self._class_loader

    @class_loader.setter
    def class_loader(self, class_loader):
        """Sets the class_loader of this RedirectViewServletContext.


        :param class_loader: The class_loader of this RedirectViewServletContext.  # noqa: E501
        :type: ApplicationContextClassLoaderParentUnnamedModuleClassLoader
        """

        self._class_loader = class_loader

    @property
    def session_timeout(self):
        """Gets the session_timeout of this RedirectViewServletContext.  # noqa: E501


        :return: The session_timeout of this RedirectViewServletContext.  # noqa: E501
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this RedirectViewServletContext.


        :param session_timeout: The session_timeout of this RedirectViewServletContext.  # noqa: E501
        :type: int
        """

        self._session_timeout = session_timeout

    @property
    def servlet_names(self):
        """Gets the servlet_names of this RedirectViewServletContext.  # noqa: E501


        :return: The servlet_names of this RedirectViewServletContext.  # noqa: E501
        :rtype: object
        """
        return self._servlet_names

    @servlet_names.setter
    def servlet_names(self, servlet_names):
        """Sets the servlet_names of this RedirectViewServletContext.


        :param servlet_names: The servlet_names of this RedirectViewServletContext.  # noqa: E501
        :type: object
        """

        self._servlet_names = servlet_names

    @property
    def server_info(self):
        """Gets the server_info of this RedirectViewServletContext.  # noqa: E501


        :return: The server_info of this RedirectViewServletContext.  # noqa: E501
        :rtype: str
        """
        return self._server_info

    @server_info.setter
    def server_info(self, server_info):
        """Sets the server_info of this RedirectViewServletContext.


        :param server_info: The server_info of this RedirectViewServletContext.  # noqa: E501
        :type: str
        """

        self._server_info = server_info

    @property
    def major_version(self):
        """Gets the major_version of this RedirectViewServletContext.  # noqa: E501


        :return: The major_version of this RedirectViewServletContext.  # noqa: E501
        :rtype: int
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this RedirectViewServletContext.


        :param major_version: The major_version of this RedirectViewServletContext.  # noqa: E501
        :type: int
        """

        self._major_version = major_version

    @property
    def minor_version(self):
        """Gets the minor_version of this RedirectViewServletContext.  # noqa: E501


        :return: The minor_version of this RedirectViewServletContext.  # noqa: E501
        :rtype: int
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this RedirectViewServletContext.


        :param minor_version: The minor_version of this RedirectViewServletContext.  # noqa: E501
        :type: int
        """

        self._minor_version = minor_version

    @property
    def servlets(self):
        """Gets the servlets of this RedirectViewServletContext.  # noqa: E501


        :return: The servlets of this RedirectViewServletContext.  # noqa: E501
        :rtype: object
        """
        return self._servlets

    @servlets.setter
    def servlets(self, servlets):
        """Sets the servlets of this RedirectViewServletContext.


        :param servlets: The servlets of this RedirectViewServletContext.  # noqa: E501
        :type: object
        """

        self._servlets = servlets

    @property
    def init_parameter_names(self):
        """Gets the init_parameter_names of this RedirectViewServletContext.  # noqa: E501


        :return: The init_parameter_names of this RedirectViewServletContext.  # noqa: E501
        :rtype: object
        """
        return self._init_parameter_names

    @init_parameter_names.setter
    def init_parameter_names(self, init_parameter_names):
        """Sets the init_parameter_names of this RedirectViewServletContext.


        :param init_parameter_names: The init_parameter_names of this RedirectViewServletContext.  # noqa: E501
        :type: object
        """

        self._init_parameter_names = init_parameter_names

    @property
    def context_path(self):
        """Gets the context_path of this RedirectViewServletContext.  # noqa: E501


        :return: The context_path of this RedirectViewServletContext.  # noqa: E501
        :rtype: str
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this RedirectViewServletContext.


        :param context_path: The context_path of this RedirectViewServletContext.  # noqa: E501
        :type: str
        """

        self._context_path = context_path

    @property
    def attribute_names(self):
        """Gets the attribute_names of this RedirectViewServletContext.  # noqa: E501


        :return: The attribute_names of this RedirectViewServletContext.  # noqa: E501
        :rtype: object
        """
        return self._attribute_names

    @attribute_names.setter
    def attribute_names(self, attribute_names):
        """Sets the attribute_names of this RedirectViewServletContext.


        :param attribute_names: The attribute_names of this RedirectViewServletContext.  # noqa: E501
        :type: object
        """

        self._attribute_names = attribute_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedirectViewServletContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedirectViewServletContext):
            return True

        return self.to_dict() != other.to_dict()
