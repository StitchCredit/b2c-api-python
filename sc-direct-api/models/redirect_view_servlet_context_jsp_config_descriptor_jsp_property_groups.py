# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class RedirectViewServletContextJspConfigDescriptorJspPropertyGroups(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_content_type': 'str',
        'include_preludes': 'list[str]',
        'el_ignored': 'str',
        'is_xml': 'str',
        'page_encoding': 'str',
        'include_codas': 'list[str]',
        'scripting_invalid': 'str',
        'error_on_undeclared_namespace': 'str',
        'deferred_syntax_allowed_as_literal': 'str',
        'trim_directive_whitespaces': 'str',
        'url_patterns': 'list[str]',
        'buffer': 'str'
    }

    attribute_map = {
        'default_content_type': 'defaultContentType',
        'include_preludes': 'includePreludes',
        'el_ignored': 'elIgnored',
        'is_xml': 'isXml',
        'page_encoding': 'pageEncoding',
        'include_codas': 'includeCodas',
        'scripting_invalid': 'scriptingInvalid',
        'error_on_undeclared_namespace': 'errorOnUndeclaredNamespace',
        'deferred_syntax_allowed_as_literal': 'deferredSyntaxAllowedAsLiteral',
        'trim_directive_whitespaces': 'trimDirectiveWhitespaces',
        'url_patterns': 'urlPatterns',
        'buffer': 'buffer'
    }

    def __init__(self, default_content_type=None, include_preludes=None, el_ignored=None, is_xml=None, page_encoding=None, include_codas=None, scripting_invalid=None, error_on_undeclared_namespace=None, deferred_syntax_allowed_as_literal=None, trim_directive_whitespaces=None, url_patterns=None, buffer=None, local_vars_configuration=None):  # noqa: E501
        """RedirectViewServletContextJspConfigDescriptorJspPropertyGroups - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_content_type = None
        self._include_preludes = None
        self._el_ignored = None
        self._is_xml = None
        self._page_encoding = None
        self._include_codas = None
        self._scripting_invalid = None
        self._error_on_undeclared_namespace = None
        self._deferred_syntax_allowed_as_literal = None
        self._trim_directive_whitespaces = None
        self._url_patterns = None
        self._buffer = None
        self.discriminator = None

        if default_content_type is not None:
            self.default_content_type = default_content_type
        if include_preludes is not None:
            self.include_preludes = include_preludes
        if el_ignored is not None:
            self.el_ignored = el_ignored
        if is_xml is not None:
            self.is_xml = is_xml
        if page_encoding is not None:
            self.page_encoding = page_encoding
        if include_codas is not None:
            self.include_codas = include_codas
        if scripting_invalid is not None:
            self.scripting_invalid = scripting_invalid
        if error_on_undeclared_namespace is not None:
            self.error_on_undeclared_namespace = error_on_undeclared_namespace
        if deferred_syntax_allowed_as_literal is not None:
            self.deferred_syntax_allowed_as_literal = deferred_syntax_allowed_as_literal
        if trim_directive_whitespaces is not None:
            self.trim_directive_whitespaces = trim_directive_whitespaces
        if url_patterns is not None:
            self.url_patterns = url_patterns
        if buffer is not None:
            self.buffer = buffer

    @property
    def default_content_type(self):
        """Gets the default_content_type of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The default_content_type of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._default_content_type

    @default_content_type.setter
    def default_content_type(self, default_content_type):
        """Sets the default_content_type of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param default_content_type: The default_content_type of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._default_content_type = default_content_type

    @property
    def include_preludes(self):
        """Gets the include_preludes of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The include_preludes of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_preludes

    @include_preludes.setter
    def include_preludes(self, include_preludes):
        """Sets the include_preludes of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param include_preludes: The include_preludes of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: list[str]
        """

        self._include_preludes = include_preludes

    @property
    def el_ignored(self):
        """Gets the el_ignored of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The el_ignored of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._el_ignored

    @el_ignored.setter
    def el_ignored(self, el_ignored):
        """Sets the el_ignored of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param el_ignored: The el_ignored of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._el_ignored = el_ignored

    @property
    def is_xml(self):
        """Gets the is_xml of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The is_xml of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._is_xml

    @is_xml.setter
    def is_xml(self, is_xml):
        """Sets the is_xml of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param is_xml: The is_xml of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._is_xml = is_xml

    @property
    def page_encoding(self):
        """Gets the page_encoding of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The page_encoding of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._page_encoding

    @page_encoding.setter
    def page_encoding(self, page_encoding):
        """Sets the page_encoding of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param page_encoding: The page_encoding of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._page_encoding = page_encoding

    @property
    def include_codas(self):
        """Gets the include_codas of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The include_codas of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_codas

    @include_codas.setter
    def include_codas(self, include_codas):
        """Sets the include_codas of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param include_codas: The include_codas of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: list[str]
        """

        self._include_codas = include_codas

    @property
    def scripting_invalid(self):
        """Gets the scripting_invalid of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The scripting_invalid of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._scripting_invalid

    @scripting_invalid.setter
    def scripting_invalid(self, scripting_invalid):
        """Sets the scripting_invalid of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param scripting_invalid: The scripting_invalid of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._scripting_invalid = scripting_invalid

    @property
    def error_on_undeclared_namespace(self):
        """Gets the error_on_undeclared_namespace of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The error_on_undeclared_namespace of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._error_on_undeclared_namespace

    @error_on_undeclared_namespace.setter
    def error_on_undeclared_namespace(self, error_on_undeclared_namespace):
        """Sets the error_on_undeclared_namespace of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param error_on_undeclared_namespace: The error_on_undeclared_namespace of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._error_on_undeclared_namespace = error_on_undeclared_namespace

    @property
    def deferred_syntax_allowed_as_literal(self):
        """Gets the deferred_syntax_allowed_as_literal of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The deferred_syntax_allowed_as_literal of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._deferred_syntax_allowed_as_literal

    @deferred_syntax_allowed_as_literal.setter
    def deferred_syntax_allowed_as_literal(self, deferred_syntax_allowed_as_literal):
        """Sets the deferred_syntax_allowed_as_literal of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param deferred_syntax_allowed_as_literal: The deferred_syntax_allowed_as_literal of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._deferred_syntax_allowed_as_literal = deferred_syntax_allowed_as_literal

    @property
    def trim_directive_whitespaces(self):
        """Gets the trim_directive_whitespaces of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The trim_directive_whitespaces of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._trim_directive_whitespaces

    @trim_directive_whitespaces.setter
    def trim_directive_whitespaces(self, trim_directive_whitespaces):
        """Sets the trim_directive_whitespaces of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param trim_directive_whitespaces: The trim_directive_whitespaces of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._trim_directive_whitespaces = trim_directive_whitespaces

    @property
    def url_patterns(self):
        """Gets the url_patterns of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The url_patterns of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._url_patterns

    @url_patterns.setter
    def url_patterns(self, url_patterns):
        """Sets the url_patterns of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param url_patterns: The url_patterns of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: list[str]
        """

        self._url_patterns = url_patterns

    @property
    def buffer(self):
        """Gets the buffer of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501


        :return: The buffer of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :rtype: str
        """
        return self._buffer

    @buffer.setter
    def buffer(self, buffer):
        """Sets the buffer of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.


        :param buffer: The buffer of this RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.  # noqa: E501
        :type: str
        """

        self._buffer = buffer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedirectViewServletContextJspConfigDescriptorJspPropertyGroups):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedirectViewServletContextJspConfigDescriptorJspPropertyGroups):
            return True

        return self.to_dict() != other.to_dict()
