# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class Bankruptcy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'filed_date': 'datetime',
        'reported_date': 'datetime',
        'reference_number': 'str',
        'disposition_status': 'CodeDescription',
        'court_name': 'str',
        'liability': 'Money',
        'exempt_amount': 'Money',
        'asset_amount': 'Money'
    }

    attribute_map = {
        'id': 'id',
        'filed_date': 'filedDate',
        'reported_date': 'reportedDate',
        'reference_number': 'referenceNumber',
        'disposition_status': 'dispositionStatus',
        'court_name': 'courtName',
        'liability': 'liability',
        'exempt_amount': 'exemptAmount',
        'asset_amount': 'assetAmount'
    }

    def __init__(self, id=None, filed_date=None, reported_date=None, reference_number=None, disposition_status=None, court_name=None, liability=None, exempt_amount=None, asset_amount=None, local_vars_configuration=None):  # noqa: E501
        """Bankruptcy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._filed_date = None
        self._reported_date = None
        self._reference_number = None
        self._disposition_status = None
        self._court_name = None
        self._liability = None
        self._exempt_amount = None
        self._asset_amount = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if filed_date is not None:
            self.filed_date = filed_date
        if reported_date is not None:
            self.reported_date = reported_date
        if reference_number is not None:
            self.reference_number = reference_number
        if disposition_status is not None:
            self.disposition_status = disposition_status
        if court_name is not None:
            self.court_name = court_name
        if liability is not None:
            self.liability = liability
        if exempt_amount is not None:
            self.exempt_amount = exempt_amount
        if asset_amount is not None:
            self.asset_amount = asset_amount

    @property
    def id(self):
        """Gets the id of this Bankruptcy.  # noqa: E501


        :return: The id of this Bankruptcy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bankruptcy.


        :param id: The id of this Bankruptcy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def filed_date(self):
        """Gets the filed_date of this Bankruptcy.  # noqa: E501


        :return: The filed_date of this Bankruptcy.  # noqa: E501
        :rtype: datetime
        """
        return self._filed_date

    @filed_date.setter
    def filed_date(self, filed_date):
        """Sets the filed_date of this Bankruptcy.


        :param filed_date: The filed_date of this Bankruptcy.  # noqa: E501
        :type: datetime
        """

        self._filed_date = filed_date

    @property
    def reported_date(self):
        """Gets the reported_date of this Bankruptcy.  # noqa: E501


        :return: The reported_date of this Bankruptcy.  # noqa: E501
        :rtype: datetime
        """
        return self._reported_date

    @reported_date.setter
    def reported_date(self, reported_date):
        """Sets the reported_date of this Bankruptcy.


        :param reported_date: The reported_date of this Bankruptcy.  # noqa: E501
        :type: datetime
        """

        self._reported_date = reported_date

    @property
    def reference_number(self):
        """Gets the reference_number of this Bankruptcy.  # noqa: E501


        :return: The reference_number of this Bankruptcy.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this Bankruptcy.


        :param reference_number: The reference_number of this Bankruptcy.  # noqa: E501
        :type: str
        """

        self._reference_number = reference_number

    @property
    def disposition_status(self):
        """Gets the disposition_status of this Bankruptcy.  # noqa: E501


        :return: The disposition_status of this Bankruptcy.  # noqa: E501
        :rtype: CodeDescription
        """
        return self._disposition_status

    @disposition_status.setter
    def disposition_status(self, disposition_status):
        """Sets the disposition_status of this Bankruptcy.


        :param disposition_status: The disposition_status of this Bankruptcy.  # noqa: E501
        :type: CodeDescription
        """

        self._disposition_status = disposition_status

    @property
    def court_name(self):
        """Gets the court_name of this Bankruptcy.  # noqa: E501


        :return: The court_name of this Bankruptcy.  # noqa: E501
        :rtype: str
        """
        return self._court_name

    @court_name.setter
    def court_name(self, court_name):
        """Sets the court_name of this Bankruptcy.


        :param court_name: The court_name of this Bankruptcy.  # noqa: E501
        :type: str
        """

        self._court_name = court_name

    @property
    def liability(self):
        """Gets the liability of this Bankruptcy.  # noqa: E501


        :return: The liability of this Bankruptcy.  # noqa: E501
        :rtype: Money
        """
        return self._liability

    @liability.setter
    def liability(self, liability):
        """Sets the liability of this Bankruptcy.


        :param liability: The liability of this Bankruptcy.  # noqa: E501
        :type: Money
        """

        self._liability = liability

    @property
    def exempt_amount(self):
        """Gets the exempt_amount of this Bankruptcy.  # noqa: E501


        :return: The exempt_amount of this Bankruptcy.  # noqa: E501
        :rtype: Money
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount):
        """Sets the exempt_amount of this Bankruptcy.


        :param exempt_amount: The exempt_amount of this Bankruptcy.  # noqa: E501
        :type: Money
        """

        self._exempt_amount = exempt_amount

    @property
    def asset_amount(self):
        """Gets the asset_amount of this Bankruptcy.  # noqa: E501


        :return: The asset_amount of this Bankruptcy.  # noqa: E501
        :rtype: Money
        """
        return self._asset_amount

    @asset_amount.setter
    def asset_amount(self, asset_amount):
        """Sets the asset_amount of this Bankruptcy.


        :param asset_amount: The asset_amount of this Bankruptcy.  # noqa: E501
        :type: Money
        """

        self._asset_amount = asset_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bankruptcy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Bankruptcy):
            return True

        return self.to_dict() != other.to_dict()
