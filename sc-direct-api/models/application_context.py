# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class ApplicationContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parent': 'ApplicationContext',
        'id': 'str',
        'display_name': 'str',
        'application_name': 'str',
        'startup_date': 'int',
        'autowire_capable_bean_factory': 'object',
        'environment': 'Environment',
        'bean_definition_count': 'int',
        'bean_definition_names': 'list[str]',
        'parent_bean_factory': 'object',
        'class_loader': 'ApplicationContextClassLoader'
    }

    attribute_map = {
        'parent': 'parent',
        'id': 'id',
        'display_name': 'displayName',
        'application_name': 'applicationName',
        'startup_date': 'startupDate',
        'autowire_capable_bean_factory': 'autowireCapableBeanFactory',
        'environment': 'environment',
        'bean_definition_count': 'beanDefinitionCount',
        'bean_definition_names': 'beanDefinitionNames',
        'parent_bean_factory': 'parentBeanFactory',
        'class_loader': 'classLoader'
    }

    def __init__(self, parent=None, id=None, display_name=None, application_name=None, startup_date=None, autowire_capable_bean_factory=None, environment=None, bean_definition_count=None, bean_definition_names=None, parent_bean_factory=None, class_loader=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parent = None
        self._id = None
        self._display_name = None
        self._application_name = None
        self._startup_date = None
        self._autowire_capable_bean_factory = None
        self._environment = None
        self._bean_definition_count = None
        self._bean_definition_names = None
        self._parent_bean_factory = None
        self._class_loader = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if application_name is not None:
            self.application_name = application_name
        if startup_date is not None:
            self.startup_date = startup_date
        if autowire_capable_bean_factory is not None:
            self.autowire_capable_bean_factory = autowire_capable_bean_factory
        if environment is not None:
            self.environment = environment
        if bean_definition_count is not None:
            self.bean_definition_count = bean_definition_count
        if bean_definition_names is not None:
            self.bean_definition_names = bean_definition_names
        if parent_bean_factory is not None:
            self.parent_bean_factory = parent_bean_factory
        if class_loader is not None:
            self.class_loader = class_loader

    @property
    def parent(self):
        """Gets the parent of this ApplicationContext.  # noqa: E501


        :return: The parent of this ApplicationContext.  # noqa: E501
        :rtype: ApplicationContext
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ApplicationContext.


        :param parent: The parent of this ApplicationContext.  # noqa: E501
        :type: ApplicationContext
        """

        self._parent = parent

    @property
    def id(self):
        """Gets the id of this ApplicationContext.  # noqa: E501


        :return: The id of this ApplicationContext.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationContext.


        :param id: The id of this ApplicationContext.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this ApplicationContext.  # noqa: E501


        :return: The display_name of this ApplicationContext.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApplicationContext.


        :param display_name: The display_name of this ApplicationContext.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationContext.  # noqa: E501


        :return: The application_name of this ApplicationContext.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationContext.


        :param application_name: The application_name of this ApplicationContext.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def startup_date(self):
        """Gets the startup_date of this ApplicationContext.  # noqa: E501


        :return: The startup_date of this ApplicationContext.  # noqa: E501
        :rtype: int
        """
        return self._startup_date

    @startup_date.setter
    def startup_date(self, startup_date):
        """Sets the startup_date of this ApplicationContext.


        :param startup_date: The startup_date of this ApplicationContext.  # noqa: E501
        :type: int
        """

        self._startup_date = startup_date

    @property
    def autowire_capable_bean_factory(self):
        """Gets the autowire_capable_bean_factory of this ApplicationContext.  # noqa: E501


        :return: The autowire_capable_bean_factory of this ApplicationContext.  # noqa: E501
        :rtype: object
        """
        return self._autowire_capable_bean_factory

    @autowire_capable_bean_factory.setter
    def autowire_capable_bean_factory(self, autowire_capable_bean_factory):
        """Sets the autowire_capable_bean_factory of this ApplicationContext.


        :param autowire_capable_bean_factory: The autowire_capable_bean_factory of this ApplicationContext.  # noqa: E501
        :type: object
        """

        self._autowire_capable_bean_factory = autowire_capable_bean_factory

    @property
    def environment(self):
        """Gets the environment of this ApplicationContext.  # noqa: E501


        :return: The environment of this ApplicationContext.  # noqa: E501
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ApplicationContext.


        :param environment: The environment of this ApplicationContext.  # noqa: E501
        :type: Environment
        """

        self._environment = environment

    @property
    def bean_definition_count(self):
        """Gets the bean_definition_count of this ApplicationContext.  # noqa: E501


        :return: The bean_definition_count of this ApplicationContext.  # noqa: E501
        :rtype: int
        """
        return self._bean_definition_count

    @bean_definition_count.setter
    def bean_definition_count(self, bean_definition_count):
        """Sets the bean_definition_count of this ApplicationContext.


        :param bean_definition_count: The bean_definition_count of this ApplicationContext.  # noqa: E501
        :type: int
        """

        self._bean_definition_count = bean_definition_count

    @property
    def bean_definition_names(self):
        """Gets the bean_definition_names of this ApplicationContext.  # noqa: E501


        :return: The bean_definition_names of this ApplicationContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._bean_definition_names

    @bean_definition_names.setter
    def bean_definition_names(self, bean_definition_names):
        """Sets the bean_definition_names of this ApplicationContext.


        :param bean_definition_names: The bean_definition_names of this ApplicationContext.  # noqa: E501
        :type: list[str]
        """

        self._bean_definition_names = bean_definition_names

    @property
    def parent_bean_factory(self):
        """Gets the parent_bean_factory of this ApplicationContext.  # noqa: E501


        :return: The parent_bean_factory of this ApplicationContext.  # noqa: E501
        :rtype: object
        """
        return self._parent_bean_factory

    @parent_bean_factory.setter
    def parent_bean_factory(self, parent_bean_factory):
        """Sets the parent_bean_factory of this ApplicationContext.


        :param parent_bean_factory: The parent_bean_factory of this ApplicationContext.  # noqa: E501
        :type: object
        """

        self._parent_bean_factory = parent_bean_factory

    @property
    def class_loader(self):
        """Gets the class_loader of this ApplicationContext.  # noqa: E501


        :return: The class_loader of this ApplicationContext.  # noqa: E501
        :rtype: ApplicationContextClassLoader
        """
        return self._class_loader

    @class_loader.setter
    def class_loader(self, class_loader):
        """Sets the class_loader of this ApplicationContext.


        :param class_loader: The class_loader of this ApplicationContext.  # noqa: E501
        :type: ApplicationContextClassLoader
        """

        self._class_loader = class_loader

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationContext):
            return True

        return self.to_dict() != other.to_dict()
