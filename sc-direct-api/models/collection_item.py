# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class CollectionItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'provider': 'str',
        'id': 'str',
        'reported_date': 'datetime',
        'assigned_date': 'datetime',
        'agency_client': 'str',
        'orginal_amount_owed': 'object',
        'account_number': 'str',
        'account_designator_code': 'str',
        'balance_date': 'datetime',
        'status_date': 'datetime',
        'status': 'str',
        'amount': 'object'
    }

    attribute_map = {
        'provider': 'provider',
        'id': 'id',
        'reported_date': 'reportedDate',
        'assigned_date': 'assignedDate',
        'agency_client': 'agencyClient',
        'orginal_amount_owed': 'orginalAmountOwed',
        'account_number': 'accountNumber',
        'account_designator_code': 'accountDesignatorCode',
        'balance_date': 'balanceDate',
        'status_date': 'statusDate',
        'status': 'status',
        'amount': 'amount'
    }

    def __init__(self, provider=None, id=None, reported_date=None, assigned_date=None, agency_client=None, orginal_amount_owed=None, account_number=None, account_designator_code=None, balance_date=None, status_date=None, status=None, amount=None, local_vars_configuration=None):  # noqa: E501
        """CollectionItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._provider = None
        self._id = None
        self._reported_date = None
        self._assigned_date = None
        self._agency_client = None
        self._orginal_amount_owed = None
        self._account_number = None
        self._account_designator_code = None
        self._balance_date = None
        self._status_date = None
        self._status = None
        self._amount = None
        self.discriminator = None

        if provider is not None:
            self.provider = provider
        if id is not None:
            self.id = id
        if reported_date is not None:
            self.reported_date = reported_date
        if assigned_date is not None:
            self.assigned_date = assigned_date
        if agency_client is not None:
            self.agency_client = agency_client
        if orginal_amount_owed is not None:
            self.orginal_amount_owed = orginal_amount_owed
        if account_number is not None:
            self.account_number = account_number
        if account_designator_code is not None:
            self.account_designator_code = account_designator_code
        if balance_date is not None:
            self.balance_date = balance_date
        if status_date is not None:
            self.status_date = status_date
        if status is not None:
            self.status = status
        if amount is not None:
            self.amount = amount

    @property
    def provider(self):
        """Gets the provider of this CollectionItem.  # noqa: E501


        :return: The provider of this CollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CollectionItem.


        :param provider: The provider of this CollectionItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["EFX", "TU", "EXP", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def id(self):
        """Gets the id of this CollectionItem.  # noqa: E501


        :return: The id of this CollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionItem.


        :param id: The id of this CollectionItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def reported_date(self):
        """Gets the reported_date of this CollectionItem.  # noqa: E501


        :return: The reported_date of this CollectionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._reported_date

    @reported_date.setter
    def reported_date(self, reported_date):
        """Sets the reported_date of this CollectionItem.


        :param reported_date: The reported_date of this CollectionItem.  # noqa: E501
        :type: datetime
        """

        self._reported_date = reported_date

    @property
    def assigned_date(self):
        """Gets the assigned_date of this CollectionItem.  # noqa: E501


        :return: The assigned_date of this CollectionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._assigned_date

    @assigned_date.setter
    def assigned_date(self, assigned_date):
        """Sets the assigned_date of this CollectionItem.


        :param assigned_date: The assigned_date of this CollectionItem.  # noqa: E501
        :type: datetime
        """

        self._assigned_date = assigned_date

    @property
    def agency_client(self):
        """Gets the agency_client of this CollectionItem.  # noqa: E501


        :return: The agency_client of this CollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._agency_client

    @agency_client.setter
    def agency_client(self, agency_client):
        """Sets the agency_client of this CollectionItem.


        :param agency_client: The agency_client of this CollectionItem.  # noqa: E501
        :type: str
        """

        self._agency_client = agency_client

    @property
    def orginal_amount_owed(self):
        """Gets the orginal_amount_owed of this CollectionItem.  # noqa: E501


        :return: The orginal_amount_owed of this CollectionItem.  # noqa: E501
        :rtype: object
        """
        return self._orginal_amount_owed

    @orginal_amount_owed.setter
    def orginal_amount_owed(self, orginal_amount_owed):
        """Sets the orginal_amount_owed of this CollectionItem.


        :param orginal_amount_owed: The orginal_amount_owed of this CollectionItem.  # noqa: E501
        :type: object
        """

        self._orginal_amount_owed = orginal_amount_owed

    @property
    def account_number(self):
        """Gets the account_number of this CollectionItem.  # noqa: E501


        :return: The account_number of this CollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CollectionItem.


        :param account_number: The account_number of this CollectionItem.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_designator_code(self):
        """Gets the account_designator_code of this CollectionItem.  # noqa: E501


        :return: The account_designator_code of this CollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._account_designator_code

    @account_designator_code.setter
    def account_designator_code(self, account_designator_code):
        """Sets the account_designator_code of this CollectionItem.


        :param account_designator_code: The account_designator_code of this CollectionItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTHORIZED_USER", "CO_MAKER", "DECEASED", "INDIVIDUAL_ACCOUNT", "JOINT_ACCOUNT", "MAKER", "ON_BEHALF_OF_ANOTHER_PERSON", "SHARED", "TERMINATED", "UNDESIGNATED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and account_designator_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `account_designator_code` ({0}), must be one of {1}"  # noqa: E501
                .format(account_designator_code, allowed_values)
            )

        self._account_designator_code = account_designator_code

    @property
    def balance_date(self):
        """Gets the balance_date of this CollectionItem.  # noqa: E501


        :return: The balance_date of this CollectionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._balance_date

    @balance_date.setter
    def balance_date(self, balance_date):
        """Sets the balance_date of this CollectionItem.


        :param balance_date: The balance_date of this CollectionItem.  # noqa: E501
        :type: datetime
        """

        self._balance_date = balance_date

    @property
    def status_date(self):
        """Gets the status_date of this CollectionItem.  # noqa: E501


        :return: The status_date of this CollectionItem.  # noqa: E501
        :rtype: datetime
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this CollectionItem.


        :param status_date: The status_date of this CollectionItem.  # noqa: E501
        :type: datetime
        """

        self._status_date = status_date

    @property
    def status(self):
        """Gets the status of this CollectionItem.  # noqa: E501


        :return: The status of this CollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CollectionItem.


        :param status: The status of this CollectionItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLOSED", "FROZEN", "OPEN", "REFINANCED", "TRANSFERRED", "ACCOUNT_DISPUTED", "ADJUSTMENT", "CHECKED", "FINANCIAL_COUNSELOR", "IN_BANKRUPTCY", "NEW_LISTING", "OTHER", "PAID", "PAYMENT", "SETTLED", "STATUS_UNKNOWN", "SUPPRESS_COLLECTION", "UNPAID", "UNSETTLED", "WAGE_EARNER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this CollectionItem.  # noqa: E501


        :return: The amount of this CollectionItem.  # noqa: E501
        :rtype: object
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CollectionItem.


        :param amount: The amount of this CollectionItem.  # noqa: E501
        :type: object
        """

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionItem):
            return True

        return self.to_dict() != other.to_dict()
