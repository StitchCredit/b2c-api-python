# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'annotations': 'list[object]',
        'declared_annotations': 'list[object]',
        'sealed': 'bool',
        'specification_title': 'str',
        'specification_version': 'str',
        'specification_vendor': 'str',
        'implementation_title': 'str',
        'implementation_version': 'str',
        'implementation_vendor': 'str'
    }

    attribute_map = {
        'name': 'name',
        'annotations': 'annotations',
        'declared_annotations': 'declaredAnnotations',
        'sealed': 'sealed',
        'specification_title': 'specificationTitle',
        'specification_version': 'specificationVersion',
        'specification_vendor': 'specificationVendor',
        'implementation_title': 'implementationTitle',
        'implementation_version': 'implementationVersion',
        'implementation_vendor': 'implementationVendor'
    }

    def __init__(self, name=None, annotations=None, declared_annotations=None, sealed=None, specification_title=None, specification_version=None, specification_vendor=None, implementation_title=None, implementation_version=None, implementation_vendor=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._annotations = None
        self._declared_annotations = None
        self._sealed = None
        self._specification_title = None
        self._specification_version = None
        self._specification_vendor = None
        self._implementation_title = None
        self._implementation_version = None
        self._implementation_vendor = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if annotations is not None:
            self.annotations = annotations
        if declared_annotations is not None:
            self.declared_annotations = declared_annotations
        if sealed is not None:
            self.sealed = sealed
        if specification_title is not None:
            self.specification_title = specification_title
        if specification_version is not None:
            self.specification_version = specification_version
        if specification_vendor is not None:
            self.specification_vendor = specification_vendor
        if implementation_title is not None:
            self.implementation_title = implementation_title
        if implementation_version is not None:
            self.implementation_version = implementation_version
        if implementation_vendor is not None:
            self.implementation_vendor = implementation_vendor

    @property
    def name(self):
        """Gets the name of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The name of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param name: The name of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def annotations(self):
        """Gets the annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: list[object]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param annotations: The annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: list[object]
        """

        self._annotations = annotations

    @property
    def declared_annotations(self):
        """Gets the declared_annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The declared_annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: list[object]
        """
        return self._declared_annotations

    @declared_annotations.setter
    def declared_annotations(self, declared_annotations):
        """Sets the declared_annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param declared_annotations: The declared_annotations of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: list[object]
        """

        self._declared_annotations = declared_annotations

    @property
    def sealed(self):
        """Gets the sealed of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The sealed of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: bool
        """
        return self._sealed

    @sealed.setter
    def sealed(self, sealed):
        """Sets the sealed of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param sealed: The sealed of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: bool
        """

        self._sealed = sealed

    @property
    def specification_title(self):
        """Gets the specification_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The specification_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._specification_title

    @specification_title.setter
    def specification_title(self, specification_title):
        """Sets the specification_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param specification_title: The specification_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._specification_title = specification_title

    @property
    def specification_version(self):
        """Gets the specification_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The specification_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._specification_version

    @specification_version.setter
    def specification_version(self, specification_version):
        """Sets the specification_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param specification_version: The specification_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._specification_version = specification_version

    @property
    def specification_vendor(self):
        """Gets the specification_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The specification_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._specification_vendor

    @specification_vendor.setter
    def specification_vendor(self, specification_vendor):
        """Sets the specification_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param specification_vendor: The specification_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._specification_vendor = specification_vendor

    @property
    def implementation_title(self):
        """Gets the implementation_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The implementation_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._implementation_title

    @implementation_title.setter
    def implementation_title(self, implementation_title):
        """Sets the implementation_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param implementation_title: The implementation_title of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._implementation_title = implementation_title

    @property
    def implementation_version(self):
        """Gets the implementation_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The implementation_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._implementation_version

    @implementation_version.setter
    def implementation_version(self, implementation_version):
        """Sets the implementation_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param implementation_version: The implementation_version of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._implementation_version = implementation_version

    @property
    def implementation_vendor(self):
        """Gets the implementation_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501


        :return: The implementation_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :rtype: str
        """
        return self._implementation_vendor

    @implementation_vendor.setter
    def implementation_vendor(self, implementation_vendor):
        """Sets the implementation_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.


        :param implementation_vendor: The implementation_vendor of this ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages.  # noqa: E501
        :type: str
        """

        self._implementation_vendor = implementation_vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackages):
            return True

        return self.to_dict() != other.to_dict()
