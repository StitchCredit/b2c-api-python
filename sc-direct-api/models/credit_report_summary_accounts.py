# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sc-direct-api.configuration import Configuration


class CreditReportSummaryAccounts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'Money',
        'credit_limit': 'Money',
        'available': 'Money',
        'monthly_payment_amount': 'Money',
        'debt_to_credit_ratio': 'float',
        'total_accounts': 'int',
        'total_negative_accounts': 'int',
        'total_accounts_with_balance': 'int'
    }

    attribute_map = {
        'balance': 'balance',
        'credit_limit': 'creditLimit',
        'available': 'available',
        'monthly_payment_amount': 'monthlyPaymentAmount',
        'debt_to_credit_ratio': 'debtToCreditRatio',
        'total_accounts': 'totalAccounts',
        'total_negative_accounts': 'totalNegativeAccounts',
        'total_accounts_with_balance': 'totalAccountsWithBalance'
    }

    def __init__(self, balance=None, credit_limit=None, available=None, monthly_payment_amount=None, debt_to_credit_ratio=None, total_accounts=None, total_negative_accounts=None, total_accounts_with_balance=None, local_vars_configuration=None):  # noqa: E501
        """CreditReportSummaryAccounts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._balance = None
        self._credit_limit = None
        self._available = None
        self._monthly_payment_amount = None
        self._debt_to_credit_ratio = None
        self._total_accounts = None
        self._total_negative_accounts = None
        self._total_accounts_with_balance = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if available is not None:
            self.available = available
        if monthly_payment_amount is not None:
            self.monthly_payment_amount = monthly_payment_amount
        if debt_to_credit_ratio is not None:
            self.debt_to_credit_ratio = debt_to_credit_ratio
        if total_accounts is not None:
            self.total_accounts = total_accounts
        if total_negative_accounts is not None:
            self.total_negative_accounts = total_negative_accounts
        if total_accounts_with_balance is not None:
            self.total_accounts_with_balance = total_accounts_with_balance

    @property
    def balance(self):
        """Gets the balance of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The balance of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CreditReportSummaryAccounts.


        :param balance: The balance of this CreditReportSummaryAccounts.  # noqa: E501
        :type: Money
        """

        self._balance = balance

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The credit_limit of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CreditReportSummaryAccounts.


        :param credit_limit: The credit_limit of this CreditReportSummaryAccounts.  # noqa: E501
        :type: Money
        """

        self._credit_limit = credit_limit

    @property
    def available(self):
        """Gets the available of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The available of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this CreditReportSummaryAccounts.


        :param available: The available of this CreditReportSummaryAccounts.  # noqa: E501
        :type: Money
        """

        self._available = available

    @property
    def monthly_payment_amount(self):
        """Gets the monthly_payment_amount of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The monthly_payment_amount of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._monthly_payment_amount

    @monthly_payment_amount.setter
    def monthly_payment_amount(self, monthly_payment_amount):
        """Sets the monthly_payment_amount of this CreditReportSummaryAccounts.


        :param monthly_payment_amount: The monthly_payment_amount of this CreditReportSummaryAccounts.  # noqa: E501
        :type: Money
        """

        self._monthly_payment_amount = monthly_payment_amount

    @property
    def debt_to_credit_ratio(self):
        """Gets the debt_to_credit_ratio of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The debt_to_credit_ratio of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: float
        """
        return self._debt_to_credit_ratio

    @debt_to_credit_ratio.setter
    def debt_to_credit_ratio(self, debt_to_credit_ratio):
        """Sets the debt_to_credit_ratio of this CreditReportSummaryAccounts.


        :param debt_to_credit_ratio: The debt_to_credit_ratio of this CreditReportSummaryAccounts.  # noqa: E501
        :type: float
        """

        self._debt_to_credit_ratio = debt_to_credit_ratio

    @property
    def total_accounts(self):
        """Gets the total_accounts of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The total_accounts of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: int
        """
        return self._total_accounts

    @total_accounts.setter
    def total_accounts(self, total_accounts):
        """Sets the total_accounts of this CreditReportSummaryAccounts.


        :param total_accounts: The total_accounts of this CreditReportSummaryAccounts.  # noqa: E501
        :type: int
        """

        self._total_accounts = total_accounts

    @property
    def total_negative_accounts(self):
        """Gets the total_negative_accounts of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The total_negative_accounts of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: int
        """
        return self._total_negative_accounts

    @total_negative_accounts.setter
    def total_negative_accounts(self, total_negative_accounts):
        """Sets the total_negative_accounts of this CreditReportSummaryAccounts.


        :param total_negative_accounts: The total_negative_accounts of this CreditReportSummaryAccounts.  # noqa: E501
        :type: int
        """

        self._total_negative_accounts = total_negative_accounts

    @property
    def total_accounts_with_balance(self):
        """Gets the total_accounts_with_balance of this CreditReportSummaryAccounts.  # noqa: E501


        :return: The total_accounts_with_balance of this CreditReportSummaryAccounts.  # noqa: E501
        :rtype: int
        """
        return self._total_accounts_with_balance

    @total_accounts_with_balance.setter
    def total_accounts_with_balance(self, total_accounts_with_balance):
        """Sets the total_accounts_with_balance of this CreditReportSummaryAccounts.


        :param total_accounts_with_balance: The total_accounts_with_balance of this CreditReportSummaryAccounts.  # noqa: E501
        :type: int
        """

        self._total_accounts_with_balance = total_accounts_with_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditReportSummaryAccounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditReportSummaryAccounts):
            return True

        return self.to_dict() != other.to_dict()
