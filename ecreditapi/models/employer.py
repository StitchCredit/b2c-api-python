# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ecreditapi.configuration import Configuration


class Employer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'employer_name': 'str',
        'employee_title': 'str',
        'current_employer': 'bool',
        'ordinal': 'int',
        'date_of_employment': 'datetime',
        'address': 'InternationalAddress'
    }

    attribute_map = {
        'employer_name': 'employerName',
        'employee_title': 'employeeTitle',
        'current_employer': 'currentEmployer',
        'ordinal': 'ordinal',
        'date_of_employment': 'dateOfEmployment',
        'address': 'address'
    }

    def __init__(self, employer_name=None, employee_title=None, current_employer=None, ordinal=None, date_of_employment=None, address=None, local_vars_configuration=None):  # noqa: E501
        """Employer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._employer_name = None
        self._employee_title = None
        self._current_employer = None
        self._ordinal = None
        self._date_of_employment = None
        self._address = None
        self.discriminator = None

        if employer_name is not None:
            self.employer_name = employer_name
        if employee_title is not None:
            self.employee_title = employee_title
        if current_employer is not None:
            self.current_employer = current_employer
        if ordinal is not None:
            self.ordinal = ordinal
        if date_of_employment is not None:
            self.date_of_employment = date_of_employment
        if address is not None:
            self.address = address

    @property
    def employer_name(self):
        """Gets the employer_name of this Employer.  # noqa: E501


        :return: The employer_name of this Employer.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this Employer.


        :param employer_name: The employer_name of this Employer.  # noqa: E501
        :type: str
        """

        self._employer_name = employer_name

    @property
    def employee_title(self):
        """Gets the employee_title of this Employer.  # noqa: E501


        :return: The employee_title of this Employer.  # noqa: E501
        :rtype: str
        """
        return self._employee_title

    @employee_title.setter
    def employee_title(self, employee_title):
        """Sets the employee_title of this Employer.


        :param employee_title: The employee_title of this Employer.  # noqa: E501
        :type: str
        """

        self._employee_title = employee_title

    @property
    def current_employer(self):
        """Gets the current_employer of this Employer.  # noqa: E501


        :return: The current_employer of this Employer.  # noqa: E501
        :rtype: bool
        """
        return self._current_employer

    @current_employer.setter
    def current_employer(self, current_employer):
        """Sets the current_employer of this Employer.


        :param current_employer: The current_employer of this Employer.  # noqa: E501
        :type: bool
        """

        self._current_employer = current_employer

    @property
    def ordinal(self):
        """Gets the ordinal of this Employer.  # noqa: E501


        :return: The ordinal of this Employer.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this Employer.


        :param ordinal: The ordinal of this Employer.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    @property
    def date_of_employment(self):
        """Gets the date_of_employment of this Employer.  # noqa: E501


        :return: The date_of_employment of this Employer.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_employment

    @date_of_employment.setter
    def date_of_employment(self, date_of_employment):
        """Sets the date_of_employment of this Employer.


        :param date_of_employment: The date_of_employment of this Employer.  # noqa: E501
        :type: datetime
        """

        self._date_of_employment = date_of_employment

    @property
    def address(self):
        """Gets the address of this Employer.  # noqa: E501


        :return: The address of this Employer.  # noqa: E501
        :rtype: InternationalAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Employer.


        :param address: The address of this Employer.  # noqa: E501
        :type: InternationalAddress
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Employer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Employer):
            return True

        return self.to_dict() != other.to_dict()
