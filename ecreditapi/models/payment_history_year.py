# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ecreditapi.configuration import Configuration


class PaymentHistoryYear(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'year': 'int',
        'january': 'PaymentHistoryMonth',
        'february': 'PaymentHistoryMonth',
        'march': 'PaymentHistoryMonth',
        'april': 'PaymentHistoryMonth',
        'may': 'PaymentHistoryMonth',
        'june': 'PaymentHistoryMonth',
        'july': 'PaymentHistoryMonth',
        'august': 'PaymentHistoryMonth',
        'september': 'PaymentHistoryMonth',
        'october': 'PaymentHistoryMonth',
        'november': 'PaymentHistoryMonth',
        'december': 'PaymentHistoryMonth'
    }

    attribute_map = {
        'year': 'year',
        'january': 'january',
        'february': 'february',
        'march': 'march',
        'april': 'april',
        'may': 'may',
        'june': 'june',
        'july': 'july',
        'august': 'august',
        'september': 'september',
        'october': 'october',
        'november': 'november',
        'december': 'december'
    }

    def __init__(self, year=None, january=None, february=None, march=None, april=None, may=None, june=None, july=None, august=None, september=None, october=None, november=None, december=None, local_vars_configuration=None):  # noqa: E501
        """PaymentHistoryYear - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._year = None
        self._january = None
        self._february = None
        self._march = None
        self._april = None
        self._may = None
        self._june = None
        self._july = None
        self._august = None
        self._september = None
        self._october = None
        self._november = None
        self._december = None
        self.discriminator = None

        if year is not None:
            self.year = year
        if january is not None:
            self.january = january
        if february is not None:
            self.february = february
        if march is not None:
            self.march = march
        if april is not None:
            self.april = april
        if may is not None:
            self.may = may
        if june is not None:
            self.june = june
        if july is not None:
            self.july = july
        if august is not None:
            self.august = august
        if september is not None:
            self.september = september
        if october is not None:
            self.october = october
        if november is not None:
            self.november = november
        if december is not None:
            self.december = december

    @property
    def year(self):
        """Gets the year of this PaymentHistoryYear.  # noqa: E501


        :return: The year of this PaymentHistoryYear.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PaymentHistoryYear.


        :param year: The year of this PaymentHistoryYear.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def january(self):
        """Gets the january of this PaymentHistoryYear.  # noqa: E501


        :return: The january of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._january

    @january.setter
    def january(self, january):
        """Sets the january of this PaymentHistoryYear.


        :param january: The january of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._january = january

    @property
    def february(self):
        """Gets the february of this PaymentHistoryYear.  # noqa: E501


        :return: The february of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._february

    @february.setter
    def february(self, february):
        """Sets the february of this PaymentHistoryYear.


        :param february: The february of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._february = february

    @property
    def march(self):
        """Gets the march of this PaymentHistoryYear.  # noqa: E501


        :return: The march of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._march

    @march.setter
    def march(self, march):
        """Sets the march of this PaymentHistoryYear.


        :param march: The march of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._march = march

    @property
    def april(self):
        """Gets the april of this PaymentHistoryYear.  # noqa: E501


        :return: The april of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._april

    @april.setter
    def april(self, april):
        """Sets the april of this PaymentHistoryYear.


        :param april: The april of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._april = april

    @property
    def may(self):
        """Gets the may of this PaymentHistoryYear.  # noqa: E501


        :return: The may of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._may

    @may.setter
    def may(self, may):
        """Sets the may of this PaymentHistoryYear.


        :param may: The may of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._may = may

    @property
    def june(self):
        """Gets the june of this PaymentHistoryYear.  # noqa: E501


        :return: The june of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._june

    @june.setter
    def june(self, june):
        """Sets the june of this PaymentHistoryYear.


        :param june: The june of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._june = june

    @property
    def july(self):
        """Gets the july of this PaymentHistoryYear.  # noqa: E501


        :return: The july of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._july

    @july.setter
    def july(self, july):
        """Sets the july of this PaymentHistoryYear.


        :param july: The july of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._july = july

    @property
    def august(self):
        """Gets the august of this PaymentHistoryYear.  # noqa: E501


        :return: The august of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._august

    @august.setter
    def august(self, august):
        """Sets the august of this PaymentHistoryYear.


        :param august: The august of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._august = august

    @property
    def september(self):
        """Gets the september of this PaymentHistoryYear.  # noqa: E501


        :return: The september of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._september

    @september.setter
    def september(self, september):
        """Sets the september of this PaymentHistoryYear.


        :param september: The september of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._september = september

    @property
    def october(self):
        """Gets the october of this PaymentHistoryYear.  # noqa: E501


        :return: The october of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._october

    @october.setter
    def october(self, october):
        """Sets the october of this PaymentHistoryYear.


        :param october: The october of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._october = october

    @property
    def november(self):
        """Gets the november of this PaymentHistoryYear.  # noqa: E501


        :return: The november of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._november

    @november.setter
    def november(self, november):
        """Sets the november of this PaymentHistoryYear.


        :param november: The november of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._november = november

    @property
    def december(self):
        """Gets the december of this PaymentHistoryYear.  # noqa: E501


        :return: The december of this PaymentHistoryYear.  # noqa: E501
        :rtype: PaymentHistoryMonth
        """
        return self._december

    @december.setter
    def december(self, december):
        """Sets the december of this PaymentHistoryYear.


        :param december: The december of this PaymentHistoryYear.  # noqa: E501
        :type: PaymentHistoryMonth
        """

        self._december = december

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentHistoryYear):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentHistoryYear):
            return True

        return self.to_dict() != other.to_dict()
