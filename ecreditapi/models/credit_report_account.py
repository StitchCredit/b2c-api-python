# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ecreditapi.configuration import Configuration


class CreditReportAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'provider': 'str',
        'id': 'str',
        'account_open': 'bool',
        'account_name': 'str',
        'contact_information': 'object',
        'account_number': 'str',
        'account_status': 'str',
        'payment_responsibility': 'str',
        'high_credit_amount': 'object',
        'account_type': 'str',
        'credit_limit_amount': 'object',
        'term_duration_months': 'int',
        'term_frequency': 'str',
        'date_opened': 'int',
        'balance_amount': 'object',
        'reported_date': 'int',
        'past_due_amount': 'object',
        'last_payment_date': 'int',
        'actual_payment': 'object',
        'monthly_payment': 'object',
        'last_activity_date': 'int',
        'major_delinquency_first_reported_date': 'int',
        'months_reviewed': 'int',
        'creditor_classification': 'str',
        'activity_designator': 'str',
        'charge_off_amount': 'object',
        'deferred_payment_start_date': 'int',
        'balloon_payment_amount': 'object',
        'balloon_payment_date': 'int',
        'date_closed': 'int',
        'loan_type': 'object',
        'first_delinquency_date': 'int',
        'comments': 'list[CodeDescription]',
        'payment_history': 'list[PaymentHistoryYear]',
        'trended_data_history': 'object',
        'is_negative': 'bool'
    }

    attribute_map = {
        'provider': 'provider',
        'id': 'id',
        'account_open': 'accountOpen',
        'account_name': 'accountName',
        'contact_information': 'contactInformation',
        'account_number': 'accountNumber',
        'account_status': 'accountStatus',
        'payment_responsibility': 'paymentResponsibility',
        'high_credit_amount': 'highCreditAmount',
        'account_type': 'accountType',
        'credit_limit_amount': 'creditLimitAmount',
        'term_duration_months': 'termDurationMonths',
        'term_frequency': 'termFrequency',
        'date_opened': 'dateOpened',
        'balance_amount': 'balanceAmount',
        'reported_date': 'reportedDate',
        'past_due_amount': 'pastDueAmount',
        'last_payment_date': 'lastPaymentDate',
        'actual_payment': 'actualPayment',
        'monthly_payment': 'monthlyPayment',
        'last_activity_date': 'lastActivityDate',
        'major_delinquency_first_reported_date': 'majorDelinquencyFirstReportedDate',
        'months_reviewed': 'monthsReviewed',
        'creditor_classification': 'creditorClassification',
        'activity_designator': 'activityDesignator',
        'charge_off_amount': 'chargeOffAmount',
        'deferred_payment_start_date': 'deferredPaymentStartDate',
        'balloon_payment_amount': 'balloonPaymentAmount',
        'balloon_payment_date': 'balloonPaymentDate',
        'date_closed': 'dateClosed',
        'loan_type': 'loanType',
        'first_delinquency_date': 'firstDelinquencyDate',
        'comments': 'comments',
        'payment_history': 'paymentHistory',
        'trended_data_history': 'trendedDataHistory',
        'is_negative': 'isNegative'
    }

    def __init__(self, provider=None, id=None, account_open=None, account_name=None, contact_information=None, account_number=None, account_status=None, payment_responsibility=None, high_credit_amount=None, account_type=None, credit_limit_amount=None, term_duration_months=None, term_frequency=None, date_opened=None, balance_amount=None, reported_date=None, past_due_amount=None, last_payment_date=None, actual_payment=None, monthly_payment=None, last_activity_date=None, major_delinquency_first_reported_date=None, months_reviewed=None, creditor_classification=None, activity_designator=None, charge_off_amount=None, deferred_payment_start_date=None, balloon_payment_amount=None, balloon_payment_date=None, date_closed=None, loan_type=None, first_delinquency_date=None, comments=None, payment_history=None, trended_data_history=None, is_negative=None, local_vars_configuration=None):  # noqa: E501
        """CreditReportAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._provider = None
        self._id = None
        self._account_open = None
        self._account_name = None
        self._contact_information = None
        self._account_number = None
        self._account_status = None
        self._payment_responsibility = None
        self._high_credit_amount = None
        self._account_type = None
        self._credit_limit_amount = None
        self._term_duration_months = None
        self._term_frequency = None
        self._date_opened = None
        self._balance_amount = None
        self._reported_date = None
        self._past_due_amount = None
        self._last_payment_date = None
        self._actual_payment = None
        self._monthly_payment = None
        self._last_activity_date = None
        self._major_delinquency_first_reported_date = None
        self._months_reviewed = None
        self._creditor_classification = None
        self._activity_designator = None
        self._charge_off_amount = None
        self._deferred_payment_start_date = None
        self._balloon_payment_amount = None
        self._balloon_payment_date = None
        self._date_closed = None
        self._loan_type = None
        self._first_delinquency_date = None
        self._comments = None
        self._payment_history = None
        self._trended_data_history = None
        self._is_negative = None
        self.discriminator = None

        if provider is not None:
            self.provider = provider
        if id is not None:
            self.id = id
        if account_open is not None:
            self.account_open = account_open
        if account_name is not None:
            self.account_name = account_name
        if contact_information is not None:
            self.contact_information = contact_information
        if account_number is not None:
            self.account_number = account_number
        if account_status is not None:
            self.account_status = account_status
        if payment_responsibility is not None:
            self.payment_responsibility = payment_responsibility
        if high_credit_amount is not None:
            self.high_credit_amount = high_credit_amount
        if account_type is not None:
            self.account_type = account_type
        if credit_limit_amount is not None:
            self.credit_limit_amount = credit_limit_amount
        if term_duration_months is not None:
            self.term_duration_months = term_duration_months
        if term_frequency is not None:
            self.term_frequency = term_frequency
        if date_opened is not None:
            self.date_opened = date_opened
        if balance_amount is not None:
            self.balance_amount = balance_amount
        if reported_date is not None:
            self.reported_date = reported_date
        if past_due_amount is not None:
            self.past_due_amount = past_due_amount
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if actual_payment is not None:
            self.actual_payment = actual_payment
        if monthly_payment is not None:
            self.monthly_payment = monthly_payment
        if last_activity_date is not None:
            self.last_activity_date = last_activity_date
        if major_delinquency_first_reported_date is not None:
            self.major_delinquency_first_reported_date = major_delinquency_first_reported_date
        if months_reviewed is not None:
            self.months_reviewed = months_reviewed
        if creditor_classification is not None:
            self.creditor_classification = creditor_classification
        if activity_designator is not None:
            self.activity_designator = activity_designator
        if charge_off_amount is not None:
            self.charge_off_amount = charge_off_amount
        if deferred_payment_start_date is not None:
            self.deferred_payment_start_date = deferred_payment_start_date
        if balloon_payment_amount is not None:
            self.balloon_payment_amount = balloon_payment_amount
        if balloon_payment_date is not None:
            self.balloon_payment_date = balloon_payment_date
        if date_closed is not None:
            self.date_closed = date_closed
        if loan_type is not None:
            self.loan_type = loan_type
        if first_delinquency_date is not None:
            self.first_delinquency_date = first_delinquency_date
        if comments is not None:
            self.comments = comments
        if payment_history is not None:
            self.payment_history = payment_history
        if trended_data_history is not None:
            self.trended_data_history = trended_data_history
        if is_negative is not None:
            self.is_negative = is_negative

    @property
    def provider(self):
        """Gets the provider of this CreditReportAccount.  # noqa: E501


        :return: The provider of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreditReportAccount.


        :param provider: The provider of this CreditReportAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["EFX", "TU", "EXP", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def id(self):
        """Gets the id of this CreditReportAccount.  # noqa: E501


        :return: The id of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditReportAccount.


        :param id: The id of this CreditReportAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_open(self):
        """Gets the account_open of this CreditReportAccount.  # noqa: E501


        :return: The account_open of this CreditReportAccount.  # noqa: E501
        :rtype: bool
        """
        return self._account_open

    @account_open.setter
    def account_open(self, account_open):
        """Sets the account_open of this CreditReportAccount.


        :param account_open: The account_open of this CreditReportAccount.  # noqa: E501
        :type: bool
        """

        self._account_open = account_open

    @property
    def account_name(self):
        """Gets the account_name of this CreditReportAccount.  # noqa: E501


        :return: The account_name of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CreditReportAccount.


        :param account_name: The account_name of this CreditReportAccount.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def contact_information(self):
        """Gets the contact_information of this CreditReportAccount.  # noqa: E501


        :return: The contact_information of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._contact_information

    @contact_information.setter
    def contact_information(self, contact_information):
        """Sets the contact_information of this CreditReportAccount.


        :param contact_information: The contact_information of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._contact_information = contact_information

    @property
    def account_number(self):
        """Gets the account_number of this CreditReportAccount.  # noqa: E501


        :return: The account_number of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreditReportAccount.


        :param account_number: The account_number of this CreditReportAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_status(self):
        """Gets the account_status of this CreditReportAccount.  # noqa: E501


        :return: The account_status of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this CreditReportAccount.


        :param account_status: The account_status of this CreditReportAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["BANKRUPTCY_OR_WAGE_EARNER_PLAN", "COLLECTION_OR_CHARGEOFF", "FORECLOSURE", "FORECLOSURE_OR_REPOSSESSION", "LATE_30_DAYS", "LATE_60_DAYS", "LATE_90_DAYS", "WAGE_EARNER_PLAN", "TOO_NEW_TO_RATE", "PAYS_AS_AGREED", "NOT_MORE_THAN_TWO_PAYMENTS_PAST_DUE", "NOT_MORE_THAN_THREE_PAYMENTS_PAST_DUE", "NOT_MORE_THAN_FOUR_PAYMENTS_PAST_DUE", "OVER_120_DAYS_PAST_DUE", "COLLECTION", "INCLUDED_IN_CHAPTER_13", "REPOSSESSION", "CHARGE_OFF", "ZERO_BALANCE_AND_CURRENT_ACCOUNT", "NO_RATE_REPORTED", "ACCOUNT_INACTIVE", "LOST_OR_STOLEN_CARD", "CONTACT_MEMBER_FOR_STATUS", "REFINANCED_OR_RENEWED", "CONSUMER_DECEASED", "IN_FINANCIAL_COUNSELING", "FORECLOSURE_PROCESS_STARTED", "IN_WEP", "ADJUSTMENT_PENDING", "DISPUTE_RESOLUTION_PENDING", "INCLUDED_IN_BANKRUPTCY", "IN_BK", "ASSIGNED_TO_US_DEPT_OF_ED", "UNAVAILABLE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and account_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def payment_responsibility(self):
        """Gets the payment_responsibility of this CreditReportAccount.  # noqa: E501


        :return: The payment_responsibility of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_responsibility

    @payment_responsibility.setter
    def payment_responsibility(self, payment_responsibility):
        """Sets the payment_responsibility of this CreditReportAccount.


        :param payment_responsibility: The payment_responsibility of this CreditReportAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["INDIVIDUAL", "JOINT_CONTRACTUAL_LIABILITY", "SHARED", "UNDESIGNATED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and payment_responsibility not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `payment_responsibility` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_responsibility, allowed_values)
            )

        self._payment_responsibility = payment_responsibility

    @property
    def high_credit_amount(self):
        """Gets the high_credit_amount of this CreditReportAccount.  # noqa: E501


        :return: The high_credit_amount of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._high_credit_amount

    @high_credit_amount.setter
    def high_credit_amount(self, high_credit_amount):
        """Sets the high_credit_amount of this CreditReportAccount.


        :param high_credit_amount: The high_credit_amount of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._high_credit_amount = high_credit_amount

    @property
    def account_type(self):
        """Gets the account_type of this CreditReportAccount.  # noqa: E501


        :return: The account_type of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this CreditReportAccount.


        :param account_type: The account_type of this CreditReportAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["REVOLVING", "MORTGAGE", "INSTALLMENT", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and account_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def credit_limit_amount(self):
        """Gets the credit_limit_amount of this CreditReportAccount.  # noqa: E501


        :return: The credit_limit_amount of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._credit_limit_amount

    @credit_limit_amount.setter
    def credit_limit_amount(self, credit_limit_amount):
        """Sets the credit_limit_amount of this CreditReportAccount.


        :param credit_limit_amount: The credit_limit_amount of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._credit_limit_amount = credit_limit_amount

    @property
    def term_duration_months(self):
        """Gets the term_duration_months of this CreditReportAccount.  # noqa: E501


        :return: The term_duration_months of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._term_duration_months

    @term_duration_months.setter
    def term_duration_months(self, term_duration_months):
        """Sets the term_duration_months of this CreditReportAccount.


        :param term_duration_months: The term_duration_months of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._term_duration_months = term_duration_months

    @property
    def term_frequency(self):
        """Gets the term_frequency of this CreditReportAccount.  # noqa: E501


        :return: The term_frequency of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._term_frequency

    @term_frequency.setter
    def term_frequency(self, term_frequency):
        """Sets the term_frequency of this CreditReportAccount.


        :param term_frequency: The term_frequency of this CreditReportAccount.  # noqa: E501
        :type: str
        """

        self._term_frequency = term_frequency

    @property
    def date_opened(self):
        """Gets the date_opened of this CreditReportAccount.  # noqa: E501


        :return: The date_opened of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._date_opened

    @date_opened.setter
    def date_opened(self, date_opened):
        """Sets the date_opened of this CreditReportAccount.


        :param date_opened: The date_opened of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._date_opened = date_opened

    @property
    def balance_amount(self):
        """Gets the balance_amount of this CreditReportAccount.  # noqa: E501


        :return: The balance_amount of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._balance_amount

    @balance_amount.setter
    def balance_amount(self, balance_amount):
        """Sets the balance_amount of this CreditReportAccount.


        :param balance_amount: The balance_amount of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._balance_amount = balance_amount

    @property
    def reported_date(self):
        """Gets the reported_date of this CreditReportAccount.  # noqa: E501


        :return: The reported_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._reported_date

    @reported_date.setter
    def reported_date(self, reported_date):
        """Sets the reported_date of this CreditReportAccount.


        :param reported_date: The reported_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._reported_date = reported_date

    @property
    def past_due_amount(self):
        """Gets the past_due_amount of this CreditReportAccount.  # noqa: E501


        :return: The past_due_amount of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._past_due_amount

    @past_due_amount.setter
    def past_due_amount(self, past_due_amount):
        """Sets the past_due_amount of this CreditReportAccount.


        :param past_due_amount: The past_due_amount of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._past_due_amount = past_due_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this CreditReportAccount.  # noqa: E501


        :return: The last_payment_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this CreditReportAccount.


        :param last_payment_date: The last_payment_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._last_payment_date = last_payment_date

    @property
    def actual_payment(self):
        """Gets the actual_payment of this CreditReportAccount.  # noqa: E501


        :return: The actual_payment of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._actual_payment

    @actual_payment.setter
    def actual_payment(self, actual_payment):
        """Sets the actual_payment of this CreditReportAccount.


        :param actual_payment: The actual_payment of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._actual_payment = actual_payment

    @property
    def monthly_payment(self):
        """Gets the monthly_payment of this CreditReportAccount.  # noqa: E501


        :return: The monthly_payment of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """Sets the monthly_payment of this CreditReportAccount.


        :param monthly_payment: The monthly_payment of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._monthly_payment = monthly_payment

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this CreditReportAccount.  # noqa: E501


        :return: The last_activity_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this CreditReportAccount.


        :param last_activity_date: The last_activity_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._last_activity_date = last_activity_date

    @property
    def major_delinquency_first_reported_date(self):
        """Gets the major_delinquency_first_reported_date of this CreditReportAccount.  # noqa: E501


        :return: The major_delinquency_first_reported_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._major_delinquency_first_reported_date

    @major_delinquency_first_reported_date.setter
    def major_delinquency_first_reported_date(self, major_delinquency_first_reported_date):
        """Sets the major_delinquency_first_reported_date of this CreditReportAccount.


        :param major_delinquency_first_reported_date: The major_delinquency_first_reported_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._major_delinquency_first_reported_date = major_delinquency_first_reported_date

    @property
    def months_reviewed(self):
        """Gets the months_reviewed of this CreditReportAccount.  # noqa: E501


        :return: The months_reviewed of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._months_reviewed

    @months_reviewed.setter
    def months_reviewed(self, months_reviewed):
        """Sets the months_reviewed of this CreditReportAccount.


        :param months_reviewed: The months_reviewed of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._months_reviewed = months_reviewed

    @property
    def creditor_classification(self):
        """Gets the creditor_classification of this CreditReportAccount.  # noqa: E501


        :return: The creditor_classification of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._creditor_classification

    @creditor_classification.setter
    def creditor_classification(self, creditor_classification):
        """Sets the creditor_classification of this CreditReportAccount.


        :param creditor_classification: The creditor_classification of this CreditReportAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADVERTISING", "CLOTHING", "COLLECTION_SERVICES", "CONTRACTORS", "DEPARTMENT_AND_MAIL_ORDER", "EMPLOYMENT", "FARM_AND_GARDEN_SUPPLIES", "FINANCE", "GROCERY", "HOME_FURNISHING", "JEWELRY_AND_CAMERA", "LUMBER_AND_HARDWARE", "MEDICAL_AND_HEALTH", "MISCELLANEOUS_AND_PUBLIC_RECORD", "OIL_AND_NATIONAL_CREDIT_CARDS", "PERSONAL_SERVICES_NOT_MEDICAL", "REAL_ESTATE_AND_PUBLIC_ACCOMMODATION", "SPORTING_GOODS", "UTILITIES_AND_FUEL", "WHOLESALE", "AUTOMOTIVE", "BANKING", "CABLE_OR_CELLULAR", "CHECK_GUARANTEE", "CREDIT_UNION", "EDUCATIONAL", "FINANCIAL", "GOVERNMENT", "INSURANCE", "MEDICAL_OR_HEALTH_CARE", "OIL_COMPANY", "PERSONAL_SERVICES", "RENTAL_OR_LEASING", "RETAIL", "UTILITIES", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and creditor_classification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `creditor_classification` ({0}), must be one of {1}"  # noqa: E501
                .format(creditor_classification, allowed_values)
            )

        self._creditor_classification = creditor_classification

    @property
    def activity_designator(self):
        """Gets the activity_designator of this CreditReportAccount.  # noqa: E501


        :return: The activity_designator of this CreditReportAccount.  # noqa: E501
        :rtype: str
        """
        return self._activity_designator

    @activity_designator.setter
    def activity_designator(self, activity_designator):
        """Sets the activity_designator of this CreditReportAccount.


        :param activity_designator: The activity_designator of this CreditReportAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLOSED", "DEFAULT", "FROZEN", "LOST_OR_STOLEN", "OPEN", "PAID", "PAID_AND_CLOSED", "REFINANCED", "TRANSFER_OR_SOLD", "TRANSFER_OR_SOLD_OR_PAID", "TRANSFERRED", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and activity_designator not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `activity_designator` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_designator, allowed_values)
            )

        self._activity_designator = activity_designator

    @property
    def charge_off_amount(self):
        """Gets the charge_off_amount of this CreditReportAccount.  # noqa: E501


        :return: The charge_off_amount of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._charge_off_amount

    @charge_off_amount.setter
    def charge_off_amount(self, charge_off_amount):
        """Sets the charge_off_amount of this CreditReportAccount.


        :param charge_off_amount: The charge_off_amount of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._charge_off_amount = charge_off_amount

    @property
    def deferred_payment_start_date(self):
        """Gets the deferred_payment_start_date of this CreditReportAccount.  # noqa: E501


        :return: The deferred_payment_start_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._deferred_payment_start_date

    @deferred_payment_start_date.setter
    def deferred_payment_start_date(self, deferred_payment_start_date):
        """Sets the deferred_payment_start_date of this CreditReportAccount.


        :param deferred_payment_start_date: The deferred_payment_start_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._deferred_payment_start_date = deferred_payment_start_date

    @property
    def balloon_payment_amount(self):
        """Gets the balloon_payment_amount of this CreditReportAccount.  # noqa: E501


        :return: The balloon_payment_amount of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._balloon_payment_amount

    @balloon_payment_amount.setter
    def balloon_payment_amount(self, balloon_payment_amount):
        """Sets the balloon_payment_amount of this CreditReportAccount.


        :param balloon_payment_amount: The balloon_payment_amount of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._balloon_payment_amount = balloon_payment_amount

    @property
    def balloon_payment_date(self):
        """Gets the balloon_payment_date of this CreditReportAccount.  # noqa: E501


        :return: The balloon_payment_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._balloon_payment_date

    @balloon_payment_date.setter
    def balloon_payment_date(self, balloon_payment_date):
        """Sets the balloon_payment_date of this CreditReportAccount.


        :param balloon_payment_date: The balloon_payment_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._balloon_payment_date = balloon_payment_date

    @property
    def date_closed(self):
        """Gets the date_closed of this CreditReportAccount.  # noqa: E501


        :return: The date_closed of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._date_closed

    @date_closed.setter
    def date_closed(self, date_closed):
        """Sets the date_closed of this CreditReportAccount.


        :param date_closed: The date_closed of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._date_closed = date_closed

    @property
    def loan_type(self):
        """Gets the loan_type of this CreditReportAccount.  # noqa: E501


        :return: The loan_type of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._loan_type

    @loan_type.setter
    def loan_type(self, loan_type):
        """Sets the loan_type of this CreditReportAccount.


        :param loan_type: The loan_type of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._loan_type = loan_type

    @property
    def first_delinquency_date(self):
        """Gets the first_delinquency_date of this CreditReportAccount.  # noqa: E501


        :return: The first_delinquency_date of this CreditReportAccount.  # noqa: E501
        :rtype: int
        """
        return self._first_delinquency_date

    @first_delinquency_date.setter
    def first_delinquency_date(self, first_delinquency_date):
        """Sets the first_delinquency_date of this CreditReportAccount.


        :param first_delinquency_date: The first_delinquency_date of this CreditReportAccount.  # noqa: E501
        :type: int
        """

        self._first_delinquency_date = first_delinquency_date

    @property
    def comments(self):
        """Gets the comments of this CreditReportAccount.  # noqa: E501


        :return: The comments of this CreditReportAccount.  # noqa: E501
        :rtype: list[CodeDescription]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CreditReportAccount.


        :param comments: The comments of this CreditReportAccount.  # noqa: E501
        :type: list[CodeDescription]
        """

        self._comments = comments

    @property
    def payment_history(self):
        """Gets the payment_history of this CreditReportAccount.  # noqa: E501


        :return: The payment_history of this CreditReportAccount.  # noqa: E501
        :rtype: list[PaymentHistoryYear]
        """
        return self._payment_history

    @payment_history.setter
    def payment_history(self, payment_history):
        """Sets the payment_history of this CreditReportAccount.


        :param payment_history: The payment_history of this CreditReportAccount.  # noqa: E501
        :type: list[PaymentHistoryYear]
        """

        self._payment_history = payment_history

    @property
    def trended_data_history(self):
        """Gets the trended_data_history of this CreditReportAccount.  # noqa: E501


        :return: The trended_data_history of this CreditReportAccount.  # noqa: E501
        :rtype: object
        """
        return self._trended_data_history

    @trended_data_history.setter
    def trended_data_history(self, trended_data_history):
        """Sets the trended_data_history of this CreditReportAccount.


        :param trended_data_history: The trended_data_history of this CreditReportAccount.  # noqa: E501
        :type: object
        """

        self._trended_data_history = trended_data_history

    @property
    def is_negative(self):
        """Gets the is_negative of this CreditReportAccount.  # noqa: E501


        :return: The is_negative of this CreditReportAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_negative

    @is_negative.setter
    def is_negative(self, is_negative):
        """Sets the is_negative of this CreditReportAccount.


        :param is_negative: The is_negative of this CreditReportAccount.  # noqa: E501
        :type: bool
        """

        self._is_negative = is_negative

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditReportAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditReportAccount):
            return True

        return self.to_dict() != other.to_dict()
