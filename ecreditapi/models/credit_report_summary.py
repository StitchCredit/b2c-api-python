# coding: utf-8

"""
    StitchCredit API

    StitchCredit API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ecreditapi.configuration import Configuration


class CreditReportSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'report_generated': 'datetime',
        'credit_file_security_freeze_flag': 'bool',
        'report_type': 'str',
        'provider': 'str',
        'subject': 'PersonSubject',
        'credit_score': 'CreditScoreProviderView',
        'revolving_accounts': 'CreditReportSummaryAccounts',
        'mortgage_accounts': 'CreditReportSummaryAccounts',
        'installment_accounts': 'CreditReportSummaryAccounts',
        'other_accounts': 'CreditReportSummaryAccounts',
        'total_open_accounts': 'CreditReportSummaryAccounts',
        'length_of_credit_history_months': 'int',
        'total_negative_accounts': 'int',
        'average_account_age_months': 'int',
        'oldest_account_open_date': 'datetime',
        'oldest_account_name': 'str',
        'most_recent_account_open_date': 'datetime',
        'most_recent_account_name': 'str',
        'total_consumer_statements': 'int',
        'most_recent_inquiry_date': 'datetime',
        'most_recent_inquiry_name': 'str',
        'total_personal_information': 'int',
        'total_inquires': 'int',
        'total_public_records': 'int',
        'total_collections': 'int',
        'dispute_information': 'CreditReportProviderDisputeInformation'
    }

    attribute_map = {
        'id': 'id',
        'report_generated': 'reportGenerated',
        'credit_file_security_freeze_flag': 'creditFileSecurityFreezeFlag',
        'report_type': 'reportType',
        'provider': 'provider',
        'subject': 'subject',
        'credit_score': 'creditScore',
        'revolving_accounts': 'revolvingAccounts',
        'mortgage_accounts': 'mortgageAccounts',
        'installment_accounts': 'installmentAccounts',
        'other_accounts': 'otherAccounts',
        'total_open_accounts': 'totalOpenAccounts',
        'length_of_credit_history_months': 'lengthOfCreditHistoryMonths',
        'total_negative_accounts': 'totalNegativeAccounts',
        'average_account_age_months': 'averageAccountAgeMonths',
        'oldest_account_open_date': 'oldestAccountOpenDate',
        'oldest_account_name': 'oldestAccountName',
        'most_recent_account_open_date': 'mostRecentAccountOpenDate',
        'most_recent_account_name': 'mostRecentAccountName',
        'total_consumer_statements': 'totalConsumerStatements',
        'most_recent_inquiry_date': 'mostRecentInquiryDate',
        'most_recent_inquiry_name': 'mostRecentInquiryName',
        'total_personal_information': 'totalPersonalInformation',
        'total_inquires': 'totalInquires',
        'total_public_records': 'totalPublicRecords',
        'total_collections': 'totalCollections',
        'dispute_information': 'disputeInformation'
    }

    def __init__(self, id=None, report_generated=None, credit_file_security_freeze_flag=None, report_type=None, provider=None, subject=None, credit_score=None, revolving_accounts=None, mortgage_accounts=None, installment_accounts=None, other_accounts=None, total_open_accounts=None, length_of_credit_history_months=None, total_negative_accounts=None, average_account_age_months=None, oldest_account_open_date=None, oldest_account_name=None, most_recent_account_open_date=None, most_recent_account_name=None, total_consumer_statements=None, most_recent_inquiry_date=None, most_recent_inquiry_name=None, total_personal_information=None, total_inquires=None, total_public_records=None, total_collections=None, dispute_information=None, local_vars_configuration=None):  # noqa: E501
        """CreditReportSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._report_generated = None
        self._credit_file_security_freeze_flag = None
        self._report_type = None
        self._provider = None
        self._subject = None
        self._credit_score = None
        self._revolving_accounts = None
        self._mortgage_accounts = None
        self._installment_accounts = None
        self._other_accounts = None
        self._total_open_accounts = None
        self._length_of_credit_history_months = None
        self._total_negative_accounts = None
        self._average_account_age_months = None
        self._oldest_account_open_date = None
        self._oldest_account_name = None
        self._most_recent_account_open_date = None
        self._most_recent_account_name = None
        self._total_consumer_statements = None
        self._most_recent_inquiry_date = None
        self._most_recent_inquiry_name = None
        self._total_personal_information = None
        self._total_inquires = None
        self._total_public_records = None
        self._total_collections = None
        self._dispute_information = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if report_generated is not None:
            self.report_generated = report_generated
        if credit_file_security_freeze_flag is not None:
            self.credit_file_security_freeze_flag = credit_file_security_freeze_flag
        if report_type is not None:
            self.report_type = report_type
        if provider is not None:
            self.provider = provider
        if subject is not None:
            self.subject = subject
        if credit_score is not None:
            self.credit_score = credit_score
        if revolving_accounts is not None:
            self.revolving_accounts = revolving_accounts
        if mortgage_accounts is not None:
            self.mortgage_accounts = mortgage_accounts
        if installment_accounts is not None:
            self.installment_accounts = installment_accounts
        if other_accounts is not None:
            self.other_accounts = other_accounts
        if total_open_accounts is not None:
            self.total_open_accounts = total_open_accounts
        if length_of_credit_history_months is not None:
            self.length_of_credit_history_months = length_of_credit_history_months
        if total_negative_accounts is not None:
            self.total_negative_accounts = total_negative_accounts
        if average_account_age_months is not None:
            self.average_account_age_months = average_account_age_months
        if oldest_account_open_date is not None:
            self.oldest_account_open_date = oldest_account_open_date
        if oldest_account_name is not None:
            self.oldest_account_name = oldest_account_name
        if most_recent_account_open_date is not None:
            self.most_recent_account_open_date = most_recent_account_open_date
        if most_recent_account_name is not None:
            self.most_recent_account_name = most_recent_account_name
        if total_consumer_statements is not None:
            self.total_consumer_statements = total_consumer_statements
        if most_recent_inquiry_date is not None:
            self.most_recent_inquiry_date = most_recent_inquiry_date
        if most_recent_inquiry_name is not None:
            self.most_recent_inquiry_name = most_recent_inquiry_name
        if total_personal_information is not None:
            self.total_personal_information = total_personal_information
        if total_inquires is not None:
            self.total_inquires = total_inquires
        if total_public_records is not None:
            self.total_public_records = total_public_records
        if total_collections is not None:
            self.total_collections = total_collections
        if dispute_information is not None:
            self.dispute_information = dispute_information

    @property
    def id(self):
        """Gets the id of this CreditReportSummary.  # noqa: E501


        :return: The id of this CreditReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditReportSummary.


        :param id: The id of this CreditReportSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def report_generated(self):
        """Gets the report_generated of this CreditReportSummary.  # noqa: E501


        :return: The report_generated of this CreditReportSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._report_generated

    @report_generated.setter
    def report_generated(self, report_generated):
        """Sets the report_generated of this CreditReportSummary.


        :param report_generated: The report_generated of this CreditReportSummary.  # noqa: E501
        :type: datetime
        """

        self._report_generated = report_generated

    @property
    def credit_file_security_freeze_flag(self):
        """Gets the credit_file_security_freeze_flag of this CreditReportSummary.  # noqa: E501


        :return: The credit_file_security_freeze_flag of this CreditReportSummary.  # noqa: E501
        :rtype: bool
        """
        return self._credit_file_security_freeze_flag

    @credit_file_security_freeze_flag.setter
    def credit_file_security_freeze_flag(self, credit_file_security_freeze_flag):
        """Sets the credit_file_security_freeze_flag of this CreditReportSummary.


        :param credit_file_security_freeze_flag: The credit_file_security_freeze_flag of this CreditReportSummary.  # noqa: E501
        :type: bool
        """

        self._credit_file_security_freeze_flag = credit_file_security_freeze_flag

    @property
    def report_type(self):
        """Gets the report_type of this CreditReportSummary.  # noqa: E501


        :return: The report_type of this CreditReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this CreditReportSummary.


        :param report_type: The report_type of this CreditReportSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["US_EFX", "US_3B"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and report_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `report_type` ({0}), must be one of {1}"  # noqa: E501
                .format(report_type, allowed_values)
            )

        self._report_type = report_type

    @property
    def provider(self):
        """Gets the provider of this CreditReportSummary.  # noqa: E501


        :return: The provider of this CreditReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreditReportSummary.


        :param provider: The provider of this CreditReportSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["EFX", "TU", "EXP", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and provider not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def subject(self):
        """Gets the subject of this CreditReportSummary.  # noqa: E501


        :return: The subject of this CreditReportSummary.  # noqa: E501
        :rtype: PersonSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CreditReportSummary.


        :param subject: The subject of this CreditReportSummary.  # noqa: E501
        :type: PersonSubject
        """

        self._subject = subject

    @property
    def credit_score(self):
        """Gets the credit_score of this CreditReportSummary.  # noqa: E501


        :return: The credit_score of this CreditReportSummary.  # noqa: E501
        :rtype: CreditScoreProviderView
        """
        return self._credit_score

    @credit_score.setter
    def credit_score(self, credit_score):
        """Sets the credit_score of this CreditReportSummary.


        :param credit_score: The credit_score of this CreditReportSummary.  # noqa: E501
        :type: CreditScoreProviderView
        """

        self._credit_score = credit_score

    @property
    def revolving_accounts(self):
        """Gets the revolving_accounts of this CreditReportSummary.  # noqa: E501


        :return: The revolving_accounts of this CreditReportSummary.  # noqa: E501
        :rtype: CreditReportSummaryAccounts
        """
        return self._revolving_accounts

    @revolving_accounts.setter
    def revolving_accounts(self, revolving_accounts):
        """Sets the revolving_accounts of this CreditReportSummary.


        :param revolving_accounts: The revolving_accounts of this CreditReportSummary.  # noqa: E501
        :type: CreditReportSummaryAccounts
        """

        self._revolving_accounts = revolving_accounts

    @property
    def mortgage_accounts(self):
        """Gets the mortgage_accounts of this CreditReportSummary.  # noqa: E501


        :return: The mortgage_accounts of this CreditReportSummary.  # noqa: E501
        :rtype: CreditReportSummaryAccounts
        """
        return self._mortgage_accounts

    @mortgage_accounts.setter
    def mortgage_accounts(self, mortgage_accounts):
        """Sets the mortgage_accounts of this CreditReportSummary.


        :param mortgage_accounts: The mortgage_accounts of this CreditReportSummary.  # noqa: E501
        :type: CreditReportSummaryAccounts
        """

        self._mortgage_accounts = mortgage_accounts

    @property
    def installment_accounts(self):
        """Gets the installment_accounts of this CreditReportSummary.  # noqa: E501


        :return: The installment_accounts of this CreditReportSummary.  # noqa: E501
        :rtype: CreditReportSummaryAccounts
        """
        return self._installment_accounts

    @installment_accounts.setter
    def installment_accounts(self, installment_accounts):
        """Sets the installment_accounts of this CreditReportSummary.


        :param installment_accounts: The installment_accounts of this CreditReportSummary.  # noqa: E501
        :type: CreditReportSummaryAccounts
        """

        self._installment_accounts = installment_accounts

    @property
    def other_accounts(self):
        """Gets the other_accounts of this CreditReportSummary.  # noqa: E501


        :return: The other_accounts of this CreditReportSummary.  # noqa: E501
        :rtype: CreditReportSummaryAccounts
        """
        return self._other_accounts

    @other_accounts.setter
    def other_accounts(self, other_accounts):
        """Sets the other_accounts of this CreditReportSummary.


        :param other_accounts: The other_accounts of this CreditReportSummary.  # noqa: E501
        :type: CreditReportSummaryAccounts
        """

        self._other_accounts = other_accounts

    @property
    def total_open_accounts(self):
        """Gets the total_open_accounts of this CreditReportSummary.  # noqa: E501


        :return: The total_open_accounts of this CreditReportSummary.  # noqa: E501
        :rtype: CreditReportSummaryAccounts
        """
        return self._total_open_accounts

    @total_open_accounts.setter
    def total_open_accounts(self, total_open_accounts):
        """Sets the total_open_accounts of this CreditReportSummary.


        :param total_open_accounts: The total_open_accounts of this CreditReportSummary.  # noqa: E501
        :type: CreditReportSummaryAccounts
        """

        self._total_open_accounts = total_open_accounts

    @property
    def length_of_credit_history_months(self):
        """Gets the length_of_credit_history_months of this CreditReportSummary.  # noqa: E501


        :return: The length_of_credit_history_months of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._length_of_credit_history_months

    @length_of_credit_history_months.setter
    def length_of_credit_history_months(self, length_of_credit_history_months):
        """Sets the length_of_credit_history_months of this CreditReportSummary.


        :param length_of_credit_history_months: The length_of_credit_history_months of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._length_of_credit_history_months = length_of_credit_history_months

    @property
    def total_negative_accounts(self):
        """Gets the total_negative_accounts of this CreditReportSummary.  # noqa: E501


        :return: The total_negative_accounts of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_negative_accounts

    @total_negative_accounts.setter
    def total_negative_accounts(self, total_negative_accounts):
        """Sets the total_negative_accounts of this CreditReportSummary.


        :param total_negative_accounts: The total_negative_accounts of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._total_negative_accounts = total_negative_accounts

    @property
    def average_account_age_months(self):
        """Gets the average_account_age_months of this CreditReportSummary.  # noqa: E501


        :return: The average_account_age_months of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._average_account_age_months

    @average_account_age_months.setter
    def average_account_age_months(self, average_account_age_months):
        """Sets the average_account_age_months of this CreditReportSummary.


        :param average_account_age_months: The average_account_age_months of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._average_account_age_months = average_account_age_months

    @property
    def oldest_account_open_date(self):
        """Gets the oldest_account_open_date of this CreditReportSummary.  # noqa: E501


        :return: The oldest_account_open_date of this CreditReportSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._oldest_account_open_date

    @oldest_account_open_date.setter
    def oldest_account_open_date(self, oldest_account_open_date):
        """Sets the oldest_account_open_date of this CreditReportSummary.


        :param oldest_account_open_date: The oldest_account_open_date of this CreditReportSummary.  # noqa: E501
        :type: datetime
        """

        self._oldest_account_open_date = oldest_account_open_date

    @property
    def oldest_account_name(self):
        """Gets the oldest_account_name of this CreditReportSummary.  # noqa: E501


        :return: The oldest_account_name of this CreditReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._oldest_account_name

    @oldest_account_name.setter
    def oldest_account_name(self, oldest_account_name):
        """Sets the oldest_account_name of this CreditReportSummary.


        :param oldest_account_name: The oldest_account_name of this CreditReportSummary.  # noqa: E501
        :type: str
        """

        self._oldest_account_name = oldest_account_name

    @property
    def most_recent_account_open_date(self):
        """Gets the most_recent_account_open_date of this CreditReportSummary.  # noqa: E501


        :return: The most_recent_account_open_date of this CreditReportSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._most_recent_account_open_date

    @most_recent_account_open_date.setter
    def most_recent_account_open_date(self, most_recent_account_open_date):
        """Sets the most_recent_account_open_date of this CreditReportSummary.


        :param most_recent_account_open_date: The most_recent_account_open_date of this CreditReportSummary.  # noqa: E501
        :type: datetime
        """

        self._most_recent_account_open_date = most_recent_account_open_date

    @property
    def most_recent_account_name(self):
        """Gets the most_recent_account_name of this CreditReportSummary.  # noqa: E501


        :return: The most_recent_account_name of this CreditReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._most_recent_account_name

    @most_recent_account_name.setter
    def most_recent_account_name(self, most_recent_account_name):
        """Sets the most_recent_account_name of this CreditReportSummary.


        :param most_recent_account_name: The most_recent_account_name of this CreditReportSummary.  # noqa: E501
        :type: str
        """

        self._most_recent_account_name = most_recent_account_name

    @property
    def total_consumer_statements(self):
        """Gets the total_consumer_statements of this CreditReportSummary.  # noqa: E501


        :return: The total_consumer_statements of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_consumer_statements

    @total_consumer_statements.setter
    def total_consumer_statements(self, total_consumer_statements):
        """Sets the total_consumer_statements of this CreditReportSummary.


        :param total_consumer_statements: The total_consumer_statements of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._total_consumer_statements = total_consumer_statements

    @property
    def most_recent_inquiry_date(self):
        """Gets the most_recent_inquiry_date of this CreditReportSummary.  # noqa: E501


        :return: The most_recent_inquiry_date of this CreditReportSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._most_recent_inquiry_date

    @most_recent_inquiry_date.setter
    def most_recent_inquiry_date(self, most_recent_inquiry_date):
        """Sets the most_recent_inquiry_date of this CreditReportSummary.


        :param most_recent_inquiry_date: The most_recent_inquiry_date of this CreditReportSummary.  # noqa: E501
        :type: datetime
        """

        self._most_recent_inquiry_date = most_recent_inquiry_date

    @property
    def most_recent_inquiry_name(self):
        """Gets the most_recent_inquiry_name of this CreditReportSummary.  # noqa: E501


        :return: The most_recent_inquiry_name of this CreditReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._most_recent_inquiry_name

    @most_recent_inquiry_name.setter
    def most_recent_inquiry_name(self, most_recent_inquiry_name):
        """Sets the most_recent_inquiry_name of this CreditReportSummary.


        :param most_recent_inquiry_name: The most_recent_inquiry_name of this CreditReportSummary.  # noqa: E501
        :type: str
        """

        self._most_recent_inquiry_name = most_recent_inquiry_name

    @property
    def total_personal_information(self):
        """Gets the total_personal_information of this CreditReportSummary.  # noqa: E501


        :return: The total_personal_information of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_personal_information

    @total_personal_information.setter
    def total_personal_information(self, total_personal_information):
        """Sets the total_personal_information of this CreditReportSummary.


        :param total_personal_information: The total_personal_information of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._total_personal_information = total_personal_information

    @property
    def total_inquires(self):
        """Gets the total_inquires of this CreditReportSummary.  # noqa: E501


        :return: The total_inquires of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_inquires

    @total_inquires.setter
    def total_inquires(self, total_inquires):
        """Sets the total_inquires of this CreditReportSummary.


        :param total_inquires: The total_inquires of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._total_inquires = total_inquires

    @property
    def total_public_records(self):
        """Gets the total_public_records of this CreditReportSummary.  # noqa: E501


        :return: The total_public_records of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_public_records

    @total_public_records.setter
    def total_public_records(self, total_public_records):
        """Sets the total_public_records of this CreditReportSummary.


        :param total_public_records: The total_public_records of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._total_public_records = total_public_records

    @property
    def total_collections(self):
        """Gets the total_collections of this CreditReportSummary.  # noqa: E501


        :return: The total_collections of this CreditReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_collections

    @total_collections.setter
    def total_collections(self, total_collections):
        """Sets the total_collections of this CreditReportSummary.


        :param total_collections: The total_collections of this CreditReportSummary.  # noqa: E501
        :type: int
        """

        self._total_collections = total_collections

    @property
    def dispute_information(self):
        """Gets the dispute_information of this CreditReportSummary.  # noqa: E501


        :return: The dispute_information of this CreditReportSummary.  # noqa: E501
        :rtype: CreditReportProviderDisputeInformation
        """
        return self._dispute_information

    @dispute_information.setter
    def dispute_information(self, dispute_information):
        """Sets the dispute_information of this CreditReportSummary.


        :param dispute_information: The dispute_information of this CreditReportSummary.  # noqa: E501
        :type: CreditReportProviderDisputeInformation
        """

        self._dispute_information = dispute_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditReportSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditReportSummary):
            return True

        return self.to_dict() != other.to_dict()
